// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'errors.dart';
import 'events.dart';
import 'frb_generated.dart';
import 'logger.dart';
import 'models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'sdk_builder.dart';

Future<BreezSdk> connect({required ConnectRequest request}) =>
    BreezSdkSparkLib.instance.api.crateSdkConnect(request: request);

Config defaultConfig({required Network network}) =>
    BreezSdkSparkLib.instance.api.crateSdkDefaultConfig(network: network);

Future<ArcStorage> defaultStorage({required String dataDir}) =>
    BreezSdkSparkLib.instance.api.crateSdkDefaultStorage(dataDir: dataDir);

Stream<LogEntry> initLogging({String? logDir, String? logFilter}) =>
    BreezSdkSparkLib.instance.api.crateSdkInitLogging(logDir: logDir, logFilter: logFilter);

Future<InputType> parse({required String input}) => BreezSdkSparkLib.instance.api.crateSdkParse(input: input);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BreezSdk>>
abstract class BreezSdk implements RustOpaqueInterface {
  Stream<SdkEvent> addEventListener();

  Future<bool> checkLightningAddressAvailable({required CheckLightningAddressRequest request});

  Future<ClaimDepositResponse> claimDeposit({required ClaimDepositRequest request});

  Future<void> deleteLightningAddress();

  void disconnect();

  Future<GetInfoResponse> getInfo({required GetInfoRequest request});

  Future<LightningAddressInfo?> getLightningAddress();

  Future<GetPaymentResponse> getPayment({required GetPaymentRequest request});

  Future<ListPaymentsResponse> listPayments({required ListPaymentsRequest request});

  Future<ListUnclaimedDepositsResponse> listUnclaimedDeposits({
    required ListUnclaimedDepositsRequest request,
  });

  Future<LnurlPayResponse> lnurlPay({required LnurlPayRequest request});

  Future<PrepareLnurlPayResponse> prepareLnurlPay({required PrepareLnurlPayRequest request});

  Future<PrepareSendPaymentResponse> prepareSendPayment({required PrepareSendPaymentRequest request});

  Future<ReceivePaymentResponse> receivePayment({required ReceivePaymentRequest request});

  Future<RefundDepositResponse> refundDeposit({required RefundDepositRequest request});

  Future<LightningAddressInfo> registerLightningAddress({required RegisterLightningAddressRequest request});

  bool removeEventListener({required String id});

  Future<SendPaymentResponse> sendPayment({required SendPaymentRequest request});

  SyncWalletResponse syncWallet({required SyncWalletRequest request});
}
