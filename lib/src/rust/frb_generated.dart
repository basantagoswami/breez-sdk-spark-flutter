// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'errors.dart';
import 'events.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';
import 'logger.dart';
import 'models.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'sdk.dart';
import 'sdk_builder.dart';

/// Main entrypoint of the Rust API
class BreezSdkSparkLib
    extends BaseEntrypoint<BreezSdkSparkLibApi, BreezSdkSparkLibApiImpl, BreezSdkSparkLibWire> {
  @internal
  static final instance = BreezSdkSparkLib._();

  BreezSdkSparkLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    BreezSdkSparkLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(api: api, handler: handler, externalLibrary: externalLibrary);
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required BreezSdkSparkLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<BreezSdkSparkLibApiImpl, BreezSdkSparkLibWire> get apiImplConstructor =>
      BreezSdkSparkLibApiImpl.new;

  @override
  WireConstructor<BreezSdkSparkLibWire> get wireConstructor => BreezSdkSparkLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -533979468;

  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
    stem: 'breez_sdk_spark_flutter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class BreezSdkSparkLibApi extends BaseApi {
  Stream<SdkEvent> crateSdkBreezSdkAddEventListener({required BreezSdk that});

  Future<bool> crateSdkBreezSdkCheckLightningAddressAvailable({
    required BreezSdk that,
    required CheckLightningAddressRequest request,
  });

  Future<ClaimDepositResponse> crateSdkBreezSdkClaimDeposit({
    required BreezSdk that,
    required ClaimDepositRequest request,
  });

  Future<void> crateSdkBreezSdkDeleteLightningAddress({required BreezSdk that});

  Future<void> crateSdkBreezSdkDisconnect({required BreezSdk that});

  Future<GetInfoResponse> crateSdkBreezSdkGetInfo({required BreezSdk that, required GetInfoRequest request});

  Future<LightningAddressInfo?> crateSdkBreezSdkGetLightningAddress({required BreezSdk that});

  Future<GetPaymentResponse> crateSdkBreezSdkGetPayment({
    required BreezSdk that,
    required GetPaymentRequest request,
  });

  Future<GetTokensMetadataResponse> crateSdkBreezSdkGetTokensMetadata({
    required BreezSdk that,
    required GetTokensMetadataRequest request,
  });

  Future<ListFiatCurrenciesResponse> crateSdkBreezSdkListFiatCurrencies({required BreezSdk that});

  Future<ListFiatRatesResponse> crateSdkBreezSdkListFiatRates({required BreezSdk that});

  Future<ListPaymentsResponse> crateSdkBreezSdkListPayments({
    required BreezSdk that,
    required ListPaymentsRequest request,
  });

  Future<ListUnclaimedDepositsResponse> crateSdkBreezSdkListUnclaimedDeposits({
    required BreezSdk that,
    required ListUnclaimedDepositsRequest request,
  });

  Future<LnurlPayResponse> crateSdkBreezSdkLnurlPay({
    required BreezSdk that,
    required LnurlPayRequest request,
  });

  Future<InputType> crateSdkBreezSdkParse({required BreezSdk that, required String input});

  Future<PrepareLnurlPayResponse> crateSdkBreezSdkPrepareLnurlPay({
    required BreezSdk that,
    required PrepareLnurlPayRequest request,
  });

  Future<PrepareSendPaymentResponse> crateSdkBreezSdkPrepareSendPayment({
    required BreezSdk that,
    required PrepareSendPaymentRequest request,
  });

  Future<ReceivePaymentResponse> crateSdkBreezSdkReceivePayment({
    required BreezSdk that,
    required ReceivePaymentRequest request,
  });

  Future<RefundDepositResponse> crateSdkBreezSdkRefundDeposit({
    required BreezSdk that,
    required RefundDepositRequest request,
  });

  Future<LightningAddressInfo> crateSdkBreezSdkRegisterLightningAddress({
    required BreezSdk that,
    required RegisterLightningAddressRequest request,
  });

  Future<bool> crateSdkBreezSdkRemoveEventListener({required BreezSdk that, required String id});

  Future<SendPaymentResponse> crateSdkBreezSdkSendPayment({
    required BreezSdk that,
    required SendPaymentRequest request,
  });

  Future<SyncWalletResponse> crateSdkBreezSdkSyncWallet({
    required BreezSdk that,
    required SyncWalletRequest request,
  });

  Future<WaitForPaymentResponse> crateSdkBreezSdkWaitForPayment({
    required BreezSdk that,
    required WaitForPaymentRequest request,
  });

  Future<BreezSdk> crateSdkBuilderSdkBuilderBuild({required SdkBuilder that});

  SdkBuilder crateSdkBuilderSdkBuilderNew({
    required Config config,
    required Seed seed,
    required ArcStorage storage,
  });

  SdkBuilder crateSdkBuilderSdkBuilderWithKeySet({
    required SdkBuilder that,
    required KeySetType keySetType,
    required bool useAddressIndex,
    int? accountNumber,
  });

  SdkBuilder crateSdkBuilderSdkBuilderWithRestChainService({
    required SdkBuilder that,
    required String url,
    Credentials? credentials,
  });

  Future<BreezSdk> crateSdkConnect({required ConnectRequest request});

  Config crateSdkDefaultConfig({required Network network});

  ArcStorage crateSdkDefaultStorage({required String dataDir});

  Stream<LogEntry> crateSdkInitLogging({String? logDir, String? logFilter});

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ArcStorage;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ArcStorage;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArcStoragePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_BreezSdk;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_BreezSdk;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BreezSdkPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_SdkBuilder;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_SdkBuilder;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SdkBuilderPtr;
}

class BreezSdkSparkLibApiImpl extends BreezSdkSparkLibApiImplPlatform implements BreezSdkSparkLibApi {
  BreezSdkSparkLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Stream<SdkEvent> crateSdkBreezSdkAddEventListener({required BreezSdk that}) {
    final listener = RustStreamSink<SdkEvent>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
              that,
              serializer,
            );
            sse_encode_StreamSink_sdk_event_Sse(listener, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1, port: port_);
          },
          codec: SseCodec(decodeSuccessData: sse_decode_String, decodeErrorData: null),
          constMeta: kCrateSdkBreezSdkAddEventListenerConstMeta,
          argValues: [that, listener],
          apiImpl: this,
        ),
      ),
    );
    return listener.stream;
  }

  TaskConstMeta get kCrateSdkBreezSdkAddEventListenerConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_add_event_listener", argNames: ["that", "listener"]);

  @override
  Future<bool> crateSdkBreezSdkCheckLightningAddressAvailable({
    required BreezSdk that,
    required CheckLightningAddressRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_check_lightning_address_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2, port: port_);
        },
        codec: SseCodec(decodeSuccessData: sse_decode_bool, decodeErrorData: sse_decode_sdk_error),
        constMeta: kCrateSdkBreezSdkCheckLightningAddressAvailableConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkCheckLightningAddressAvailableConstMeta => const TaskConstMeta(
    debugName: "BreezSdk_check_lightning_address_available",
    argNames: ["that", "request"],
  );

  @override
  Future<ClaimDepositResponse> crateSdkBreezSdkClaimDeposit({
    required BreezSdk that,
    required ClaimDepositRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_claim_deposit_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_claim_deposit_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkClaimDepositConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkClaimDepositConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_claim_deposit", argNames: ["that", "request"]);

  @override
  Future<void> crateSdkBreezSdkDeleteLightningAddress({required BreezSdk that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4, port: port_);
        },
        codec: SseCodec(decodeSuccessData: sse_decode_unit, decodeErrorData: sse_decode_sdk_error),
        constMeta: kCrateSdkBreezSdkDeleteLightningAddressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkDeleteLightningAddressConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_delete_lightning_address", argNames: ["that"]);

  @override
  Future<void> crateSdkBreezSdkDisconnect({required BreezSdk that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5, port: port_);
        },
        codec: SseCodec(decodeSuccessData: sse_decode_unit, decodeErrorData: sse_decode_sdk_error),
        constMeta: kCrateSdkBreezSdkDisconnectConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkDisconnectConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_disconnect", argNames: ["that"]);

  @override
  Future<GetInfoResponse> crateSdkBreezSdkGetInfo({required BreezSdk that, required GetInfoRequest request}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_get_info_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_get_info_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkGetInfoConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkGetInfoConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_get_info", argNames: ["that", "request"]);

  @override
  Future<LightningAddressInfo?> crateSdkBreezSdkGetLightningAddress({required BreezSdk that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_lightning_address_info,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkGetLightningAddressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkGetLightningAddressConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_get_lightning_address", argNames: ["that"]);

  @override
  Future<GetPaymentResponse> crateSdkBreezSdkGetPayment({
    required BreezSdk that,
    required GetPaymentRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_get_payment_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_get_payment_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkGetPaymentConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkGetPaymentConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_get_payment", argNames: ["that", "request"]);

  @override
  Future<GetTokensMetadataResponse> crateSdkBreezSdkGetTokensMetadata({
    required BreezSdk that,
    required GetTokensMetadataRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_get_tokens_metadata_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_get_tokens_metadata_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkGetTokensMetadataConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkGetTokensMetadataConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_get_tokens_metadata", argNames: ["that", "request"]);

  @override
  Future<ListFiatCurrenciesResponse> crateSdkBreezSdkListFiatCurrencies({required BreezSdk that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 10, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_fiat_currencies_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkListFiatCurrenciesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkListFiatCurrenciesConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_list_fiat_currencies", argNames: ["that"]);

  @override
  Future<ListFiatRatesResponse> crateSdkBreezSdkListFiatRates({required BreezSdk that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 11, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_fiat_rates_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkListFiatRatesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkListFiatRatesConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_list_fiat_rates", argNames: ["that"]);

  @override
  Future<ListPaymentsResponse> crateSdkBreezSdkListPayments({
    required BreezSdk that,
    required ListPaymentsRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_list_payments_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_payments_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkListPaymentsConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkListPaymentsConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_list_payments", argNames: ["that", "request"]);

  @override
  Future<ListUnclaimedDepositsResponse> crateSdkBreezSdkListUnclaimedDeposits({
    required BreezSdk that,
    required ListUnclaimedDepositsRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_list_unclaimed_deposits_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_unclaimed_deposits_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkListUnclaimedDepositsConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkListUnclaimedDepositsConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_list_unclaimed_deposits", argNames: ["that", "request"]);

  @override
  Future<LnurlPayResponse> crateSdkBreezSdkLnurlPay({
    required BreezSdk that,
    required LnurlPayRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_lnurl_pay_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 14, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_lnurl_pay_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkLnurlPayConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkLnurlPayConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_lnurl_pay", argNames: ["that", "request"]);

  @override
  Future<InputType> crateSdkBreezSdkParse({required BreezSdk that, required String input}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_String(input, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 15, port: port_);
        },
        codec: SseCodec(decodeSuccessData: sse_decode_input_type, decodeErrorData: sse_decode_sdk_error),
        constMeta: kCrateSdkBreezSdkParseConstMeta,
        argValues: [that, input],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkParseConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_parse", argNames: ["that", "input"]);

  @override
  Future<PrepareLnurlPayResponse> crateSdkBreezSdkPrepareLnurlPay({
    required BreezSdk that,
    required PrepareLnurlPayRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_prepare_lnurl_pay_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_prepare_lnurl_pay_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkPrepareLnurlPayConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkPrepareLnurlPayConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_prepare_lnurl_pay", argNames: ["that", "request"]);

  @override
  Future<PrepareSendPaymentResponse> crateSdkBreezSdkPrepareSendPayment({
    required BreezSdk that,
    required PrepareSendPaymentRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_prepare_send_payment_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_prepare_send_payment_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkPrepareSendPaymentConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkPrepareSendPaymentConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_prepare_send_payment", argNames: ["that", "request"]);

  @override
  Future<ReceivePaymentResponse> crateSdkBreezSdkReceivePayment({
    required BreezSdk that,
    required ReceivePaymentRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_receive_payment_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_receive_payment_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkReceivePaymentConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkReceivePaymentConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_receive_payment", argNames: ["that", "request"]);

  @override
  Future<RefundDepositResponse> crateSdkBreezSdkRefundDeposit({
    required BreezSdk that,
    required RefundDepositRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_refund_deposit_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 19, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_refund_deposit_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkRefundDepositConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkRefundDepositConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_refund_deposit", argNames: ["that", "request"]);

  @override
  Future<LightningAddressInfo> crateSdkBreezSdkRegisterLightningAddress({
    required BreezSdk that,
    required RegisterLightningAddressRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_register_lightning_address_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 20, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_lightning_address_info,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkRegisterLightningAddressConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkRegisterLightningAddressConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_register_lightning_address", argNames: ["that", "request"]);

  @override
  Future<bool> crateSdkBreezSdkRemoveEventListener({required BreezSdk that, required String id}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_String(id, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 21, port: port_);
        },
        codec: SseCodec(decodeSuccessData: sse_decode_bool, decodeErrorData: null),
        constMeta: kCrateSdkBreezSdkRemoveEventListenerConstMeta,
        argValues: [that, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkRemoveEventListenerConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_remove_event_listener", argNames: ["that", "id"]);

  @override
  Future<SendPaymentResponse> crateSdkBreezSdkSendPayment({
    required BreezSdk that,
    required SendPaymentRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_send_payment_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 22, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_send_payment_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkSendPaymentConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkSendPaymentConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_send_payment", argNames: ["that", "request"]);

  @override
  Future<SyncWalletResponse> crateSdkBreezSdkSyncWallet({
    required BreezSdk that,
    required SyncWalletRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_sync_wallet_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 23, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_sync_wallet_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkSyncWalletConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkSyncWalletConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_sync_wallet", argNames: ["that", "request"]);

  @override
  Future<WaitForPaymentResponse> crateSdkBreezSdkWaitForPayment({
    required BreezSdk that,
    required WaitForPaymentRequest request,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
            that,
            serializer,
          );
          sse_encode_box_autoadd_wait_for_payment_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 24, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_wait_for_payment_response,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBreezSdkWaitForPaymentConstMeta,
        argValues: [that, request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBreezSdkWaitForPaymentConstMeta =>
      const TaskConstMeta(debugName: "BreezSdk_wait_for_payment", argNames: ["that", "request"]);

  @override
  Future<BreezSdk> crateSdkBuilderSdkBuilderBuild({required SdkBuilder that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
            that,
            serializer,
          );
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 25, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkBuilderSdkBuilderBuildConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBuilderSdkBuilderBuildConstMeta =>
      const TaskConstMeta(debugName: "SdkBuilder_build", argNames: ["that"]);

  @override
  SdkBuilder crateSdkBuilderSdkBuilderNew({
    required Config config,
    required Seed seed,
    required ArcStorage storage,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_config(config, serializer);
          sse_encode_box_autoadd_seed(seed, serializer);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage(
            storage,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 26)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder,
          decodeErrorData: null,
        ),
        constMeta: kCrateSdkBuilderSdkBuilderNewConstMeta,
        argValues: [config, seed, storage],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBuilderSdkBuilderNewConstMeta =>
      const TaskConstMeta(debugName: "SdkBuilder_new", argNames: ["config", "seed", "storage"]);

  @override
  SdkBuilder crateSdkBuilderSdkBuilderWithKeySet({
    required SdkBuilder that,
    required KeySetType keySetType,
    required bool useAddressIndex,
    int? accountNumber,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
            that,
            serializer,
          );
          sse_encode_key_set_type(keySetType, serializer);
          sse_encode_bool(useAddressIndex, serializer);
          sse_encode_opt_box_autoadd_u_32(accountNumber, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 27)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder,
          decodeErrorData: null,
        ),
        constMeta: kCrateSdkBuilderSdkBuilderWithKeySetConstMeta,
        argValues: [that, keySetType, useAddressIndex, accountNumber],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBuilderSdkBuilderWithKeySetConstMeta => const TaskConstMeta(
    debugName: "SdkBuilder_with_key_set",
    argNames: ["that", "keySetType", "useAddressIndex", "accountNumber"],
  );

  @override
  SdkBuilder crateSdkBuilderSdkBuilderWithRestChainService({
    required SdkBuilder that,
    required String url,
    Credentials? credentials,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
            that,
            serializer,
          );
          sse_encode_String(url, serializer);
          sse_encode_opt_box_autoadd_credentials(credentials, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 28)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder,
          decodeErrorData: null,
        ),
        constMeta: kCrateSdkBuilderSdkBuilderWithRestChainServiceConstMeta,
        argValues: [that, url, credentials],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkBuilderSdkBuilderWithRestChainServiceConstMeta => const TaskConstMeta(
    debugName: "SdkBuilder_with_rest_chain_service",
    argNames: ["that", "url", "credentials"],
  );

  @override
  Future<BreezSdk> crateSdkConnect({required ConnectRequest request}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_connect_request(request, serializer);
          pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 29, port: port_);
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkConnectConstMeta,
        argValues: [request],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkConnectConstMeta =>
      const TaskConstMeta(debugName: "connect", argNames: ["request"]);

  @override
  Config crateSdkDefaultConfig({required Network network}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_network(network, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 30)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_config, decodeErrorData: null),
        constMeta: kCrateSdkDefaultConfigConstMeta,
        argValues: [network],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkDefaultConfigConstMeta =>
      const TaskConstMeta(debugName: "default_config", argNames: ["network"]);

  @override
  ArcStorage crateSdkDefaultStorage({required String dataDir}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(dataDir, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 31)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage,
          decodeErrorData: sse_decode_sdk_error,
        ),
        constMeta: kCrateSdkDefaultStorageConstMeta,
        argValues: [dataDir],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateSdkDefaultStorageConstMeta =>
      const TaskConstMeta(debugName: "default_storage", argNames: ["dataDir"]);

  @override
  Stream<LogEntry> crateSdkInitLogging({String? logDir, String? logFilter}) {
    final appLogger = RustStreamSink<LogEntry>();
    handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_String(logDir, serializer);
          sse_encode_StreamSink_log_entry_Sse(appLogger, serializer);
          sse_encode_opt_String(logFilter, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 32)!;
        },
        codec: SseCodec(decodeSuccessData: sse_decode_unit, decodeErrorData: sse_decode_sdk_error),
        constMeta: kCrateSdkInitLoggingConstMeta,
        argValues: [logDir, appLogger, logFilter],
        apiImpl: this,
      ),
    );
    return appLogger.stream;
  }

  TaskConstMeta get kCrateSdkInitLoggingConstMeta =>
      const TaskConstMeta(debugName: "init_logging", argNames: ["logDir", "appLogger", "logFilter"]);

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ArcStorage =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ArcStorage =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_BreezSdk =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_BreezSdk =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_SdkBuilder =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_SdkBuilder =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcStorage
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcStorageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BreezSdk dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BreezSdkImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SdkBuilder dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SdkBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BreezSdk dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BreezSdkImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SdkBuilder dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SdkBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, TokenBalance> dco_decode_Map_String_token_balance_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_token_balance(raw).map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcStorage dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcStorageImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BreezSdk dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BreezSdkImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SdkBuilder dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SdkBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<LogEntry> dco_decode_StreamSink_log_entry_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<SdkEvent> dco_decode_StreamSink_sdk_event_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  BigInt dco_decode_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BigInt.parse(raw);
  }

  @protected
  AesSuccessActionData dco_decode_aes_success_action_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AesSuccessActionData(
      description: dco_decode_String(arr[0]),
      ciphertext: dco_decode_String(arr[1]),
      iv: dco_decode_String(arr[2]),
    );
  }

  @protected
  AesSuccessActionDataDecrypted dco_decode_aes_success_action_data_decrypted(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AesSuccessActionDataDecrypted(
      description: dco_decode_String(arr[0]),
      plaintext: dco_decode_String(arr[1]),
    );
  }

  @protected
  AesSuccessActionDataResult dco_decode_aes_success_action_data_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return AesSuccessActionDataResult_Decrypted(
          data: dco_decode_box_autoadd_aes_success_action_data_decrypted(raw[1]),
        );
      case 1:
        return AesSuccessActionDataResult_ErrorStatus(reason: dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Amount dco_decode_amount(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Amount_Bitcoin(amountMsat: dco_decode_u_64(raw[1]));
      case 1:
        return Amount_Currency(
          iso4217Code: dco_decode_String(raw[1]),
          fractionalAmount: dco_decode_u_64(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  AssetFilter dco_decode_asset_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return AssetFilter_Bitcoin();
      case 1:
        return AssetFilter_Token(tokenIdentifier: dco_decode_opt_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Bip21Details dco_decode_bip_21_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Bip21Details(
      amountSat: dco_decode_opt_box_autoadd_u_64(arr[0]),
      assetId: dco_decode_opt_String(arr[1]),
      uri: dco_decode_String(arr[2]),
      extras: dco_decode_list_bip_21_extra(arr[3]),
      label: dco_decode_opt_String(arr[4]),
      message: dco_decode_opt_String(arr[5]),
      paymentMethods: dco_decode_list_input_type(arr[6]),
    );
  }

  @protected
  Bip21Extra dco_decode_bip_21_extra(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Bip21Extra(key: dco_decode_String(arr[0]), value: dco_decode_String(arr[1]));
  }

  @protected
  BitcoinAddressDetails dco_decode_bitcoin_address_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return BitcoinAddressDetails(
      address: dco_decode_String(arr[0]),
      network: dco_decode_bitcoin_network(arr[1]),
      source: dco_decode_payment_request_source(arr[2]),
    );
  }

  @protected
  BitcoinNetwork dco_decode_bitcoin_network(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BitcoinNetwork.values[raw as int];
  }

  @protected
  Bolt11Invoice dco_decode_bolt_11_invoice(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Bolt11Invoice(
      bolt11: dco_decode_String(arr[0]),
      source: dco_decode_payment_request_source(arr[1]),
    );
  }

  @protected
  Bolt11InvoiceDetails dco_decode_bolt_11_invoice_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12) throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return Bolt11InvoiceDetails(
      amountMsat: dco_decode_opt_box_autoadd_u_64(arr[0]),
      description: dco_decode_opt_String(arr[1]),
      descriptionHash: dco_decode_opt_String(arr[2]),
      expiry: dco_decode_u_64(arr[3]),
      invoice: dco_decode_bolt_11_invoice(arr[4]),
      minFinalCltvExpiryDelta: dco_decode_u_64(arr[5]),
      network: dco_decode_bitcoin_network(arr[6]),
      payeePubkey: dco_decode_String(arr[7]),
      paymentHash: dco_decode_String(arr[8]),
      paymentSecret: dco_decode_String(arr[9]),
      routingHints: dco_decode_list_bolt_11_route_hint(arr[10]),
      timestamp: dco_decode_u_64(arr[11]),
    );
  }

  @protected
  Bolt11RouteHint dco_decode_bolt_11_route_hint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Bolt11RouteHint(hops: dco_decode_list_bolt_11_route_hint_hop(arr[0]));
  }

  @protected
  Bolt11RouteHintHop dco_decode_bolt_11_route_hint_hop(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return Bolt11RouteHintHop(
      srcNodeId: dco_decode_String(arr[0]),
      shortChannelId: dco_decode_String(arr[1]),
      feesBaseMsat: dco_decode_u_32(arr[2]),
      feesProportionalMillionths: dco_decode_u_32(arr[3]),
      cltvExpiryDelta: dco_decode_u_16(arr[4]),
      htlcMinimumMsat: dco_decode_opt_box_autoadd_u_64(arr[5]),
      htlcMaximumMsat: dco_decode_opt_box_autoadd_u_64(arr[6]),
    );
  }

  @protected
  Bolt12Invoice dco_decode_bolt_12_invoice(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Bolt12Invoice(
      invoice: dco_decode_String(arr[0]),
      source: dco_decode_payment_request_source(arr[1]),
    );
  }

  @protected
  Bolt12InvoiceDetails dco_decode_bolt_12_invoice_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Bolt12InvoiceDetails(
      amountMsat: dco_decode_u_64(arr[0]),
      invoice: dco_decode_bolt_12_invoice(arr[1]),
    );
  }

  @protected
  Bolt12InvoiceRequestDetails dco_decode_bolt_12_invoice_request_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.isNotEmpty) throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return Bolt12InvoiceRequestDetails();
  }

  @protected
  Bolt12Offer dco_decode_bolt_12_offer(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Bolt12Offer(offer: dco_decode_String(arr[0]), source: dco_decode_payment_request_source(arr[1]));
  }

  @protected
  Bolt12OfferBlindedPath dco_decode_bolt_12_offer_blinded_path(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Bolt12OfferBlindedPath(blindedHops: dco_decode_list_String(arr[0]));
  }

  @protected
  Bolt12OfferDetails dco_decode_bolt_12_offer_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8) throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Bolt12OfferDetails(
      absoluteExpiry: dco_decode_opt_box_autoadd_u_64(arr[0]),
      chains: dco_decode_list_String(arr[1]),
      description: dco_decode_opt_String(arr[2]),
      issuer: dco_decode_opt_String(arr[3]),
      minAmount: dco_decode_opt_box_autoadd_amount(arr[4]),
      offer: dco_decode_bolt_12_offer(arr[5]),
      paths: dco_decode_list_bolt_12_offer_blinded_path(arr[6]),
      signingPubkey: dco_decode_opt_String(arr[7]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  AesSuccessActionData dco_decode_box_autoadd_aes_success_action_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_aes_success_action_data(raw);
  }

  @protected
  AesSuccessActionDataDecrypted dco_decode_box_autoadd_aes_success_action_data_decrypted(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_aes_success_action_data_decrypted(raw);
  }

  @protected
  AesSuccessActionDataResult dco_decode_box_autoadd_aes_success_action_data_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_aes_success_action_data_result(raw);
  }

  @protected
  Amount dco_decode_box_autoadd_amount(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_amount(raw);
  }

  @protected
  AssetFilter dco_decode_box_autoadd_asset_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_asset_filter(raw);
  }

  @protected
  Bip21Details dco_decode_box_autoadd_bip_21_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bip_21_details(raw);
  }

  @protected
  BitcoinAddressDetails dco_decode_box_autoadd_bitcoin_address_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bitcoin_address_details(raw);
  }

  @protected
  Bolt11InvoiceDetails dco_decode_box_autoadd_bolt_11_invoice_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bolt_11_invoice_details(raw);
  }

  @protected
  Bolt12InvoiceDetails dco_decode_box_autoadd_bolt_12_invoice_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bolt_12_invoice_details(raw);
  }

  @protected
  Bolt12InvoiceRequestDetails dco_decode_box_autoadd_bolt_12_invoice_request_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bolt_12_invoice_request_details(raw);
  }

  @protected
  Bolt12OfferDetails dco_decode_box_autoadd_bolt_12_offer_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bolt_12_offer_details(raw);
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CheckLightningAddressRequest dco_decode_box_autoadd_check_lightning_address_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_check_lightning_address_request(raw);
  }

  @protected
  ClaimDepositRequest dco_decode_box_autoadd_claim_deposit_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_claim_deposit_request(raw);
  }

  @protected
  Config dco_decode_box_autoadd_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_config(raw);
  }

  @protected
  ConnectRequest dco_decode_box_autoadd_connect_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_connect_request(raw);
  }

  @protected
  Credentials dco_decode_box_autoadd_credentials(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_credentials(raw);
  }

  @protected
  DepositClaimError dco_decode_box_autoadd_deposit_claim_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_deposit_claim_error(raw);
  }

  @protected
  Fee dco_decode_box_autoadd_fee(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_fee(raw);
  }

  @protected
  GetInfoRequest dco_decode_box_autoadd_get_info_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_get_info_request(raw);
  }

  @protected
  GetPaymentRequest dco_decode_box_autoadd_get_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_get_payment_request(raw);
  }

  @protected
  GetTokensMetadataRequest dco_decode_box_autoadd_get_tokens_metadata_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_get_tokens_metadata_request(raw);
  }

  @protected
  LightningAddressDetails dco_decode_box_autoadd_lightning_address_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_lightning_address_details(raw);
  }

  @protected
  LightningAddressInfo dco_decode_box_autoadd_lightning_address_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_lightning_address_info(raw);
  }

  @protected
  ListPaymentsRequest dco_decode_box_autoadd_list_payments_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_list_payments_request(raw);
  }

  @protected
  ListUnclaimedDepositsRequest dco_decode_box_autoadd_list_unclaimed_deposits_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_list_unclaimed_deposits_request(raw);
  }

  @protected
  LnurlAuthRequestDetails dco_decode_box_autoadd_lnurl_auth_request_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_lnurl_auth_request_details(raw);
  }

  @protected
  LnurlPayInfo dco_decode_box_autoadd_lnurl_pay_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_lnurl_pay_info(raw);
  }

  @protected
  LnurlPayRequest dco_decode_box_autoadd_lnurl_pay_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_lnurl_pay_request(raw);
  }

  @protected
  LnurlPayRequestDetails dco_decode_box_autoadd_lnurl_pay_request_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_lnurl_pay_request_details(raw);
  }

  @protected
  LnurlWithdrawRequestDetails dco_decode_box_autoadd_lnurl_withdraw_request_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_lnurl_withdraw_request_details(raw);
  }

  @protected
  MessageSuccessActionData dco_decode_box_autoadd_message_success_action_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_message_success_action_data(raw);
  }

  @protected
  Payment dco_decode_box_autoadd_payment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_payment(raw);
  }

  @protected
  PaymentDetails dco_decode_box_autoadd_payment_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_payment_details(raw);
  }

  @protected
  PrepareLnurlPayRequest dco_decode_box_autoadd_prepare_lnurl_pay_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_prepare_lnurl_pay_request(raw);
  }

  @protected
  PrepareSendPaymentRequest dco_decode_box_autoadd_prepare_send_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_prepare_send_payment_request(raw);
  }

  @protected
  ReceivePaymentRequest dco_decode_box_autoadd_receive_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_receive_payment_request(raw);
  }

  @protected
  RefundDepositRequest dco_decode_box_autoadd_refund_deposit_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_refund_deposit_request(raw);
  }

  @protected
  RegisterLightningAddressRequest dco_decode_box_autoadd_register_lightning_address_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_register_lightning_address_request(raw);
  }

  @protected
  SatsPaymentDetails dco_decode_box_autoadd_sats_payment_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sats_payment_details(raw);
  }

  @protected
  Seed dco_decode_box_autoadd_seed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_seed(raw);
  }

  @protected
  SendOnchainFeeQuote dco_decode_box_autoadd_send_onchain_fee_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_send_onchain_fee_quote(raw);
  }

  @protected
  SendPaymentOptions dco_decode_box_autoadd_send_payment_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_send_payment_options(raw);
  }

  @protected
  SendPaymentRequest dco_decode_box_autoadd_send_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_send_payment_request(raw);
  }

  @protected
  SilentPaymentAddressDetails dco_decode_box_autoadd_silent_payment_address_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_silent_payment_address_details(raw);
  }

  @protected
  SparkAddressDetails dco_decode_box_autoadd_spark_address_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_spark_address_details(raw);
  }

  @protected
  SparkAddressPaymentType dco_decode_box_autoadd_spark_address_payment_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_spark_address_payment_type(raw);
  }

  @protected
  SparkInvoiceFields dco_decode_box_autoadd_spark_invoice_fields(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_spark_invoice_fields(raw);
  }

  @protected
  SuccessAction dco_decode_box_autoadd_success_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_success_action(raw);
  }

  @protected
  SuccessActionProcessed dco_decode_box_autoadd_success_action_processed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_success_action_processed(raw);
  }

  @protected
  Symbol dco_decode_box_autoadd_symbol(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_symbol(raw);
  }

  @protected
  SyncWalletRequest dco_decode_box_autoadd_sync_wallet_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sync_wallet_request(raw);
  }

  @protected
  TokenMetadata dco_decode_box_autoadd_token_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_token_metadata(raw);
  }

  @protected
  TokensPaymentDetails dco_decode_box_autoadd_tokens_payment_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tokens_payment_details(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  UrlSuccessActionData dco_decode_box_autoadd_url_success_action_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_url_success_action_data(raw);
  }

  @protected
  WaitForPaymentRequest dco_decode_box_autoadd_wait_for_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_wait_for_payment_request(raw);
  }

  @protected
  CheckLightningAddressRequest dco_decode_check_lightning_address_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return CheckLightningAddressRequest(username: dco_decode_String(arr[0]));
  }

  @protected
  ClaimDepositRequest dco_decode_claim_deposit_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ClaimDepositRequest(
      txid: dco_decode_String(arr[0]),
      vout: dco_decode_u_32(arr[1]),
      maxFee: dco_decode_opt_box_autoadd_fee(arr[2]),
    );
  }

  @protected
  ClaimDepositResponse dco_decode_claim_deposit_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ClaimDepositResponse(payment: dco_decode_payment(arr[0]));
  }

  @protected
  Config dco_decode_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8) throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Config(
      apiKey: dco_decode_opt_String(arr[0]),
      network: dco_decode_network(arr[1]),
      syncIntervalSecs: dco_decode_u_32(arr[2]),
      maxDepositClaimFee: dco_decode_opt_box_autoadd_fee(arr[3]),
      lnurlDomain: dco_decode_opt_String(arr[4]),
      preferSparkOverLightning: dco_decode_bool(arr[5]),
      externalInputParsers: dco_decode_opt_list_external_input_parser(arr[6]),
      useDefaultExternalInputParsers: dco_decode_bool(arr[7]),
    );
  }

  @protected
  ConnectRequest dco_decode_connect_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ConnectRequest(
      config: dco_decode_config(arr[0]),
      seed: dco_decode_seed(arr[1]),
      storageDir: dco_decode_String(arr[2]),
    );
  }

  @protected
  Credentials dco_decode_credentials(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Credentials(username: dco_decode_String(arr[0]), password: dco_decode_String(arr[1]));
  }

  @protected
  CurrencyInfo dco_decode_currency_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return CurrencyInfo(
      name: dco_decode_String(arr[0]),
      fractionSize: dco_decode_u_32(arr[1]),
      spacing: dco_decode_opt_box_autoadd_u_32(arr[2]),
      symbol: dco_decode_opt_box_autoadd_symbol(arr[3]),
      uniqSymbol: dco_decode_opt_box_autoadd_symbol(arr[4]),
      localizedName: dco_decode_list_localized_name(arr[5]),
      localeOverrides: dco_decode_list_locale_overrides(arr[6]),
    );
  }

  @protected
  DepositClaimError dco_decode_deposit_claim_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return DepositClaimError_DepositClaimFeeExceeded(
          tx: dco_decode_String(raw[1]),
          vout: dco_decode_u_32(raw[2]),
          maxFee: dco_decode_box_autoadd_fee(raw[3]),
          actualFee: dco_decode_u_64(raw[4]),
        );
      case 1:
        return DepositClaimError_MissingUtxo(tx: dco_decode_String(raw[1]), vout: dco_decode_u_32(raw[2]));
      case 2:
        return DepositClaimError_Generic(message: dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  DepositInfo dco_decode_deposit_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return DepositInfo(
      txid: dco_decode_String(arr[0]),
      vout: dco_decode_u_32(arr[1]),
      amountSats: dco_decode_u_64(arr[2]),
      refundTx: dco_decode_opt_String(arr[3]),
      refundTxId: dco_decode_opt_String(arr[4]),
      claimError: dco_decode_opt_box_autoadd_deposit_claim_error(arr[5]),
    );
  }

  @protected
  ExternalInputParser dco_decode_external_input_parser(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ExternalInputParser(
      providerId: dco_decode_String(arr[0]),
      inputRegex: dco_decode_String(arr[1]),
      parserUrl: dco_decode_String(arr[2]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  Fee dco_decode_fee(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Fee_Fixed(amount: dco_decode_u_64(raw[1]));
      case 1:
        return Fee_Rate(satPerVbyte: dco_decode_u_64(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  FiatCurrency dco_decode_fiat_currency(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FiatCurrency(id: dco_decode_String(arr[0]), info: dco_decode_currency_info(arr[1]));
  }

  @protected
  GetInfoRequest dco_decode_get_info_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GetInfoRequest(ensureSynced: dco_decode_opt_box_autoadd_bool(arr[0]));
  }

  @protected
  GetInfoResponse dco_decode_get_info_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GetInfoResponse(
      balanceSats: dco_decode_u_64(arr[0]),
      tokenBalances: dco_decode_Map_String_token_balance_None(arr[1]),
    );
  }

  @protected
  GetPaymentRequest dco_decode_get_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GetPaymentRequest(paymentId: dco_decode_String(arr[0]));
  }

  @protected
  GetPaymentResponse dco_decode_get_payment_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GetPaymentResponse(payment: dco_decode_payment(arr[0]));
  }

  @protected
  GetTokensMetadataRequest dco_decode_get_tokens_metadata_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GetTokensMetadataRequest(tokenIdentifiers: dco_decode_list_String(arr[0]));
  }

  @protected
  GetTokensMetadataResponse dco_decode_get_tokens_metadata_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return GetTokensMetadataResponse(tokensMetadata: dco_decode_list_token_metadata(arr[0]));
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  InputType dco_decode_input_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return InputType_BitcoinAddress(dco_decode_box_autoadd_bitcoin_address_details(raw[1]));
      case 1:
        return InputType_Bolt11Invoice(dco_decode_box_autoadd_bolt_11_invoice_details(raw[1]));
      case 2:
        return InputType_Bolt12Invoice(dco_decode_box_autoadd_bolt_12_invoice_details(raw[1]));
      case 3:
        return InputType_Bolt12Offer(dco_decode_box_autoadd_bolt_12_offer_details(raw[1]));
      case 4:
        return InputType_LightningAddress(dco_decode_box_autoadd_lightning_address_details(raw[1]));
      case 5:
        return InputType_LnurlPay(dco_decode_box_autoadd_lnurl_pay_request_details(raw[1]));
      case 6:
        return InputType_SilentPaymentAddress(dco_decode_box_autoadd_silent_payment_address_details(raw[1]));
      case 7:
        return InputType_LnurlAuth(dco_decode_box_autoadd_lnurl_auth_request_details(raw[1]));
      case 8:
        return InputType_Url(dco_decode_String(raw[1]));
      case 9:
        return InputType_Bip21(dco_decode_box_autoadd_bip_21_details(raw[1]));
      case 10:
        return InputType_Bolt12InvoiceRequest(dco_decode_box_autoadd_bolt_12_invoice_request_details(raw[1]));
      case 11:
        return InputType_LnurlWithdraw(dco_decode_box_autoadd_lnurl_withdraw_request_details(raw[1]));
      case 12:
        return InputType_SparkAddress(dco_decode_box_autoadd_spark_address_details(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  KeySetType dco_decode_key_set_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeySetType.values[raw as int];
  }

  @protected
  LightningAddressDetails dco_decode_lightning_address_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LightningAddressDetails(
      address: dco_decode_String(arr[0]),
      payRequest: dco_decode_lnurl_pay_request_details(arr[1]),
    );
  }

  @protected
  LightningAddressInfo dco_decode_lightning_address_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LightningAddressInfo(
      description: dco_decode_String(arr[0]),
      lightningAddress: dco_decode_String(arr[1]),
      lnurl: dco_decode_String(arr[2]),
      username: dco_decode_String(arr[3]),
    );
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<Bip21Extra> dco_decode_list_bip_21_extra(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bip_21_extra).toList();
  }

  @protected
  List<Bolt11RouteHint> dco_decode_list_bolt_11_route_hint(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bolt_11_route_hint).toList();
  }

  @protected
  List<Bolt11RouteHintHop> dco_decode_list_bolt_11_route_hint_hop(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bolt_11_route_hint_hop).toList();
  }

  @protected
  List<Bolt12OfferBlindedPath> dco_decode_list_bolt_12_offer_blinded_path(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_bolt_12_offer_blinded_path).toList();
  }

  @protected
  List<DepositInfo> dco_decode_list_deposit_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_deposit_info).toList();
  }

  @protected
  List<ExternalInputParser> dco_decode_list_external_input_parser(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_external_input_parser).toList();
  }

  @protected
  ListFiatCurrenciesResponse dco_decode_list_fiat_currencies_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ListFiatCurrenciesResponse(currencies: dco_decode_list_fiat_currency(arr[0]));
  }

  @protected
  List<FiatCurrency> dco_decode_list_fiat_currency(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_fiat_currency).toList();
  }

  @protected
  ListFiatRatesResponse dco_decode_list_fiat_rates_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ListFiatRatesResponse(rates: dco_decode_list_rate(arr[0]));
  }

  @protected
  List<InputType> dco_decode_list_input_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_input_type).toList();
  }

  @protected
  List<LocaleOverrides> dco_decode_list_locale_overrides(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_locale_overrides).toList();
  }

  @protected
  List<LocalizedName> dco_decode_list_localized_name(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_localized_name).toList();
  }

  @protected
  List<Payment> dco_decode_list_payment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_payment).toList();
  }

  @protected
  List<PaymentStatus> dco_decode_list_payment_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_payment_status).toList();
  }

  @protected
  List<PaymentType> dco_decode_list_payment_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_payment_type).toList();
  }

  @protected
  ListPaymentsRequest dco_decode_list_payments_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8) throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return ListPaymentsRequest(
      typeFilter: dco_decode_opt_list_payment_type(arr[0]),
      statusFilter: dco_decode_opt_list_payment_status(arr[1]),
      assetFilter: dco_decode_opt_box_autoadd_asset_filter(arr[2]),
      fromTimestamp: dco_decode_opt_box_autoadd_u_64(arr[3]),
      toTimestamp: dco_decode_opt_box_autoadd_u_64(arr[4]),
      offset: dco_decode_opt_box_autoadd_u_32(arr[5]),
      limit: dco_decode_opt_box_autoadd_u_32(arr[6]),
      sortAscending: dco_decode_opt_box_autoadd_bool(arr[7]),
    );
  }

  @protected
  ListPaymentsResponse dco_decode_list_payments_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ListPaymentsResponse(payments: dco_decode_list_payment(arr[0]));
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<Rate> dco_decode_list_rate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_rate).toList();
  }

  @protected
  List<(String, TokenBalance)> dco_decode_list_record_string_token_balance(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_token_balance).toList();
  }

  @protected
  List<TokenMetadata> dco_decode_list_token_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_token_metadata).toList();
  }

  @protected
  ListUnclaimedDepositsRequest dco_decode_list_unclaimed_deposits_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.isNotEmpty) throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return ListUnclaimedDepositsRequest();
  }

  @protected
  ListUnclaimedDepositsResponse dco_decode_list_unclaimed_deposits_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ListUnclaimedDepositsResponse(deposits: dco_decode_list_deposit_info(arr[0]));
  }

  @protected
  LnurlAuthRequestDetails dco_decode_lnurl_auth_request_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LnurlAuthRequestDetails(
      k1: dco_decode_String(arr[0]),
      action: dco_decode_opt_String(arr[1]),
      domain: dco_decode_String(arr[2]),
      url: dco_decode_String(arr[3]),
    );
  }

  @protected
  LnurlPayInfo dco_decode_lnurl_pay_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return LnurlPayInfo(
      lnAddress: dco_decode_opt_String(arr[0]),
      comment: dco_decode_opt_String(arr[1]),
      domain: dco_decode_opt_String(arr[2]),
      metadata: dco_decode_opt_String(arr[3]),
      processedSuccessAction: dco_decode_opt_box_autoadd_success_action_processed(arr[4]),
      rawSuccessAction: dco_decode_opt_box_autoadd_success_action(arr[5]),
    );
  }

  @protected
  LnurlPayRequest dco_decode_lnurl_pay_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LnurlPayRequest(prepareResponse: dco_decode_prepare_lnurl_pay_response(arr[0]));
  }

  @protected
  LnurlPayRequestDetails dco_decode_lnurl_pay_request_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10) throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return LnurlPayRequestDetails(
      callback: dco_decode_String(arr[0]),
      minSendable: dco_decode_u_64(arr[1]),
      maxSendable: dco_decode_u_64(arr[2]),
      metadataStr: dco_decode_String(arr[3]),
      commentAllowed: dco_decode_u_16(arr[4]),
      domain: dco_decode_String(arr[5]),
      url: dco_decode_String(arr[6]),
      address: dco_decode_opt_String(arr[7]),
      allowsNostr: dco_decode_opt_box_autoadd_bool(arr[8]),
      nostrPubkey: dco_decode_opt_String(arr[9]),
    );
  }

  @protected
  LnurlPayResponse dco_decode_lnurl_pay_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LnurlPayResponse(
      payment: dco_decode_payment(arr[0]),
      successAction: dco_decode_opt_box_autoadd_success_action_processed(arr[1]),
    );
  }

  @protected
  LnurlWithdrawRequestDetails dco_decode_lnurl_withdraw_request_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return LnurlWithdrawRequestDetails(
      callback: dco_decode_String(arr[0]),
      k1: dco_decode_String(arr[1]),
      defaultDescription: dco_decode_String(arr[2]),
      minWithdrawable: dco_decode_u_64(arr[3]),
      maxWithdrawable: dco_decode_u_64(arr[4]),
    );
  }

  @protected
  LocaleOverrides dco_decode_locale_overrides(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LocaleOverrides(
      locale: dco_decode_String(arr[0]),
      spacing: dco_decode_opt_box_autoadd_u_32(arr[1]),
      symbol: dco_decode_symbol(arr[2]),
    );
  }

  @protected
  LocalizedName dco_decode_localized_name(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LocalizedName(locale: dco_decode_String(arr[0]), name: dco_decode_String(arr[1]));
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogEntry(line: dco_decode_String(arr[0]), level: dco_decode_String(arr[1]));
  }

  @protected
  MessageSuccessActionData dco_decode_message_success_action_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageSuccessActionData(message: dco_decode_String(arr[0]));
  }

  @protected
  Network dco_decode_network(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Network.values[raw as int];
  }

  @protected
  OnchainConfirmationSpeed dco_decode_onchain_confirmation_speed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OnchainConfirmationSpeed.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  BigInt? dco_decode_opt_U128(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_U128(raw);
  }

  @protected
  Amount? dco_decode_opt_box_autoadd_amount(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_amount(raw);
  }

  @protected
  AssetFilter? dco_decode_opt_box_autoadd_asset_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_asset_filter(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  Credentials? dco_decode_opt_box_autoadd_credentials(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_credentials(raw);
  }

  @protected
  DepositClaimError? dco_decode_opt_box_autoadd_deposit_claim_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_deposit_claim_error(raw);
  }

  @protected
  Fee? dco_decode_opt_box_autoadd_fee(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_fee(raw);
  }

  @protected
  LightningAddressInfo? dco_decode_opt_box_autoadd_lightning_address_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_lightning_address_info(raw);
  }

  @protected
  LnurlPayInfo? dco_decode_opt_box_autoadd_lnurl_pay_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_lnurl_pay_info(raw);
  }

  @protected
  PaymentDetails? dco_decode_opt_box_autoadd_payment_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_payment_details(raw);
  }

  @protected
  SendPaymentOptions? dco_decode_opt_box_autoadd_send_payment_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_send_payment_options(raw);
  }

  @protected
  SparkAddressPaymentType? dco_decode_opt_box_autoadd_spark_address_payment_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_spark_address_payment_type(raw);
  }

  @protected
  SparkInvoiceFields? dco_decode_opt_box_autoadd_spark_invoice_fields(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_spark_invoice_fields(raw);
  }

  @protected
  SuccessAction? dco_decode_opt_box_autoadd_success_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_success_action(raw);
  }

  @protected
  SuccessActionProcessed? dco_decode_opt_box_autoadd_success_action_processed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_success_action_processed(raw);
  }

  @protected
  Symbol? dco_decode_opt_box_autoadd_symbol(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_symbol(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  List<ExternalInputParser>? dco_decode_opt_list_external_input_parser(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_external_input_parser(raw);
  }

  @protected
  List<PaymentStatus>? dco_decode_opt_list_payment_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_payment_status(raw);
  }

  @protected
  List<PaymentType>? dco_decode_opt_list_payment_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_payment_type(raw);
  }

  @protected
  Payment dco_decode_payment(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8) throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Payment(
      id: dco_decode_String(arr[0]),
      paymentType: dco_decode_payment_type(arr[1]),
      status: dco_decode_payment_status(arr[2]),
      amount: dco_decode_U128(arr[3]),
      fees: dco_decode_U128(arr[4]),
      timestamp: dco_decode_u_64(arr[5]),
      method: dco_decode_payment_method(arr[6]),
      details: dco_decode_opt_box_autoadd_payment_details(arr[7]),
    );
  }

  @protected
  PaymentDetails dco_decode_payment_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PaymentDetails_Spark();
      case 1:
        return PaymentDetails_Token(
          metadata: dco_decode_box_autoadd_token_metadata(raw[1]),
          txHash: dco_decode_String(raw[2]),
        );
      case 2:
        return PaymentDetails_Lightning(
          description: dco_decode_opt_String(raw[1]),
          preimage: dco_decode_opt_String(raw[2]),
          invoice: dco_decode_String(raw[3]),
          paymentHash: dco_decode_String(raw[4]),
          destinationPubkey: dco_decode_String(raw[5]),
          lnurlPayInfo: dco_decode_opt_box_autoadd_lnurl_pay_info(raw[6]),
        );
      case 3:
        return PaymentDetails_Withdraw(txId: dco_decode_String(raw[1]));
      case 4:
        return PaymentDetails_Deposit(txId: dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  PaymentMethod dco_decode_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PaymentMethod.values[raw as int];
  }

  @protected
  PaymentRequestSource dco_decode_payment_request_source(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PaymentRequestSource(
      bip21Uri: dco_decode_opt_String(arr[0]),
      bip353Address: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  PaymentStatus dco_decode_payment_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PaymentStatus.values[raw as int];
  }

  @protected
  PaymentType dco_decode_payment_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PaymentType.values[raw as int];
  }

  @protected
  PrepareLnurlPayRequest dco_decode_prepare_lnurl_pay_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return PrepareLnurlPayRequest(
      amountSats: dco_decode_u_64(arr[0]),
      payRequest: dco_decode_lnurl_pay_request_details(arr[1]),
      comment: dco_decode_opt_String(arr[2]),
      validateSuccessActionUrl: dco_decode_opt_box_autoadd_bool(arr[3]),
    );
  }

  @protected
  PrepareLnurlPayResponse dco_decode_prepare_lnurl_pay_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return PrepareLnurlPayResponse(
      amountSats: dco_decode_u_64(arr[0]),
      comment: dco_decode_opt_String(arr[1]),
      payRequest: dco_decode_lnurl_pay_request_details(arr[2]),
      feeSats: dco_decode_u_64(arr[3]),
      invoiceDetails: dco_decode_bolt_11_invoice_details(arr[4]),
      successAction: dco_decode_opt_box_autoadd_success_action(arr[5]),
    );
  }

  @protected
  PrepareSendPaymentRequest dco_decode_prepare_send_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PrepareSendPaymentRequest(
      paymentRequest: dco_decode_String(arr[0]),
      amount: dco_decode_opt_U128(arr[1]),
      tokenIdentifier: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  PrepareSendPaymentResponse dco_decode_prepare_send_payment_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PrepareSendPaymentResponse(
      paymentMethod: dco_decode_send_payment_method(arr[0]),
      amount: dco_decode_U128(arr[1]),
      tokenIdentifier: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  Rate dco_decode_rate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Rate(coin: dco_decode_String(arr[0]), value: dco_decode_f_64(arr[1]));
  }

  @protected
  ReceivePaymentMethod dco_decode_receive_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return ReceivePaymentMethod_SparkAddress();
      case 1:
        return ReceivePaymentMethod_BitcoinAddress();
      case 2:
        return ReceivePaymentMethod_Bolt11Invoice(
          description: dco_decode_String(raw[1]),
          amountSats: dco_decode_opt_box_autoadd_u_64(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ReceivePaymentRequest dco_decode_receive_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ReceivePaymentRequest(paymentMethod: dco_decode_receive_payment_method(arr[0]));
  }

  @protected
  ReceivePaymentResponse dco_decode_receive_payment_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ReceivePaymentResponse(
      paymentRequest: dco_decode_String(arr[0]),
      feeSats: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  (String, TokenBalance) dco_decode_record_string_token_balance(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_token_balance(arr[1]));
  }

  @protected
  RefundDepositRequest dco_decode_refund_deposit_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return RefundDepositRequest(
      txid: dco_decode_String(arr[0]),
      vout: dco_decode_u_32(arr[1]),
      destinationAddress: dco_decode_String(arr[2]),
      fee: dco_decode_fee(arr[3]),
    );
  }

  @protected
  RefundDepositResponse dco_decode_refund_deposit_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RefundDepositResponse(txId: dco_decode_String(arr[0]), txHex: dco_decode_String(arr[1]));
  }

  @protected
  RegisterLightningAddressRequest dco_decode_register_lightning_address_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return RegisterLightningAddressRequest(
      username: dco_decode_String(arr[0]),
      description: dco_decode_opt_String(arr[1]),
    );
  }

  @protected
  SatsPaymentDetails dco_decode_sats_payment_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SatsPaymentDetails(amount: dco_decode_opt_box_autoadd_u_64(arr[0]));
  }

  @protected
  SdkError dco_decode_sdk_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SdkError_SparkError(dco_decode_String(raw[1]));
      case 1:
        return SdkError_InvalidUuid(dco_decode_String(raw[1]));
      case 2:
        return SdkError_InvalidInput(dco_decode_String(raw[1]));
      case 3:
        return SdkError_NetworkError(dco_decode_String(raw[1]));
      case 4:
        return SdkError_StorageError(dco_decode_String(raw[1]));
      case 5:
        return SdkError_ChainServiceError(dco_decode_String(raw[1]));
      case 6:
        return SdkError_DepositClaimFeeExceeded(
          tx: dco_decode_String(raw[1]),
          vout: dco_decode_u_32(raw[2]),
          maxFee: dco_decode_box_autoadd_fee(raw[3]),
          actualFee: dco_decode_u_64(raw[4]),
        );
      case 7:
        return SdkError_MissingUtxo(tx: dco_decode_String(raw[1]), vout: dco_decode_u_32(raw[2]));
      case 8:
        return SdkError_LnurlError(dco_decode_String(raw[1]));
      case 9:
        return SdkError_Generic(dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SdkEvent dco_decode_sdk_event(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SdkEvent_Synced();
      case 1:
        return SdkEvent_ClaimDepositsFailed(unclaimedDeposits: dco_decode_list_deposit_info(raw[1]));
      case 2:
        return SdkEvent_ClaimDepositsSucceeded(claimedDeposits: dco_decode_list_deposit_info(raw[1]));
      case 3:
        return SdkEvent_PaymentSucceeded(payment: dco_decode_box_autoadd_payment(raw[1]));
      case 4:
        return SdkEvent_PaymentFailed(payment: dco_decode_box_autoadd_payment(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Seed dco_decode_seed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Seed_Mnemonic(mnemonic: dco_decode_String(raw[1]), passphrase: dco_decode_opt_String(raw[2]));
      case 1:
        return Seed_Entropy(dco_decode_list_prim_u_8_strict(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SendOnchainFeeQuote dco_decode_send_onchain_fee_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return SendOnchainFeeQuote(
      id: dco_decode_String(arr[0]),
      expiresAt: dco_decode_u_64(arr[1]),
      speedFast: dco_decode_send_onchain_speed_fee_quote(arr[2]),
      speedMedium: dco_decode_send_onchain_speed_fee_quote(arr[3]),
      speedSlow: dco_decode_send_onchain_speed_fee_quote(arr[4]),
    );
  }

  @protected
  SendOnchainSpeedFeeQuote dco_decode_send_onchain_speed_fee_quote(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SendOnchainSpeedFeeQuote(
      userFeeSat: dco_decode_u_64(arr[0]),
      l1BroadcastFeeSat: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  SendPaymentMethod dco_decode_send_payment_method(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SendPaymentMethod_BitcoinAddress(
          address: dco_decode_box_autoadd_bitcoin_address_details(raw[1]),
          feeQuote: dco_decode_box_autoadd_send_onchain_fee_quote(raw[2]),
        );
      case 1:
        return SendPaymentMethod_Bolt11Invoice(
          invoiceDetails: dco_decode_box_autoadd_bolt_11_invoice_details(raw[1]),
          sparkTransferFeeSats: dco_decode_opt_box_autoadd_u_64(raw[2]),
          lightningFeeSats: dco_decode_u_64(raw[3]),
        );
      case 2:
        return SendPaymentMethod_SparkAddress(
          address: dco_decode_String(raw[1]),
          fee: dco_decode_U128(raw[2]),
          tokenIdentifier: dco_decode_opt_String(raw[3]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SendPaymentOptions dco_decode_send_payment_options(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SendPaymentOptions_BitcoinAddress(
          confirmationSpeed: dco_decode_onchain_confirmation_speed(raw[1]),
        );
      case 1:
        return SendPaymentOptions_Bolt11Invoice(
          preferSpark: dco_decode_bool(raw[1]),
          completionTimeoutSecs: dco_decode_opt_box_autoadd_u_32(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SendPaymentRequest dco_decode_send_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SendPaymentRequest(
      prepareResponse: dco_decode_prepare_send_payment_response(arr[0]),
      options: dco_decode_opt_box_autoadd_send_payment_options(arr[1]),
    );
  }

  @protected
  SendPaymentResponse dco_decode_send_payment_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SendPaymentResponse(payment: dco_decode_payment(arr[0]));
  }

  @protected
  SilentPaymentAddressDetails dco_decode_silent_payment_address_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SilentPaymentAddressDetails(
      address: dco_decode_String(arr[0]),
      network: dco_decode_bitcoin_network(arr[1]),
      source: dco_decode_payment_request_source(arr[2]),
    );
  }

  @protected
  SparkAddress dco_decode_spark_address(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return SparkAddress(
      identityPublicKey: dco_decode_String(arr[0]),
      network: dco_decode_bitcoin_network(arr[1]),
      sparkInvoiceFields: dco_decode_opt_box_autoadd_spark_invoice_fields(arr[2]),
      signature: dco_decode_opt_String(arr[3]),
    );
  }

  @protected
  SparkAddressDetails dco_decode_spark_address_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return SparkAddressDetails(
      address: dco_decode_String(arr[0]),
      decodedAddress: dco_decode_spark_address(arr[1]),
      source: dco_decode_payment_request_source(arr[2]),
    );
  }

  @protected
  SparkAddressPaymentType dco_decode_spark_address_payment_type(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SparkAddressPaymentType_TokensPayment(dco_decode_box_autoadd_tokens_payment_details(raw[1]));
      case 1:
        return SparkAddressPaymentType_SatsPayment(dco_decode_box_autoadd_sats_payment_details(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SparkInvoiceFields dco_decode_spark_invoice_fields(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return SparkInvoiceFields(
      id: dco_decode_String(arr[0]),
      version: dco_decode_u_32(arr[1]),
      memo: dco_decode_opt_String(arr[2]),
      senderPublicKey: dco_decode_opt_String(arr[3]),
      expiryTime: dco_decode_opt_box_autoadd_u_64(arr[4]),
      paymentType: dco_decode_opt_box_autoadd_spark_address_payment_type(arr[5]),
    );
  }

  @protected
  SuccessAction dco_decode_success_action(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SuccessAction_Aes(data: dco_decode_box_autoadd_aes_success_action_data(raw[1]));
      case 1:
        return SuccessAction_Message(data: dco_decode_box_autoadd_message_success_action_data(raw[1]));
      case 2:
        return SuccessAction_Url(data: dco_decode_box_autoadd_url_success_action_data(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SuccessActionProcessed dco_decode_success_action_processed(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return SuccessActionProcessed_Aes(
          result: dco_decode_box_autoadd_aes_success_action_data_result(raw[1]),
        );
      case 1:
        return SuccessActionProcessed_Message(
          data: dco_decode_box_autoadd_message_success_action_data(raw[1]),
        );
      case 2:
        return SuccessActionProcessed_Url(data: dco_decode_box_autoadd_url_success_action_data(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  Symbol dco_decode_symbol(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Symbol(
      grapheme: dco_decode_opt_String(arr[0]),
      template: dco_decode_opt_String(arr[1]),
      rtl: dco_decode_opt_box_autoadd_bool(arr[2]),
      position: dco_decode_opt_box_autoadd_u_32(arr[3]),
    );
  }

  @protected
  SyncWalletRequest dco_decode_sync_wallet_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.isNotEmpty) throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return SyncWalletRequest();
  }

  @protected
  SyncWalletResponse dco_decode_sync_wallet_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.isNotEmpty) throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return SyncWalletResponse();
  }

  @protected
  TokenBalance dco_decode_token_balance(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TokenBalance(balance: dco_decode_U128(arr[0]), tokenMetadata: dco_decode_token_metadata(arr[1]));
  }

  @protected
  TokenMetadata dco_decode_token_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return TokenMetadata(
      identifier: dco_decode_String(arr[0]),
      issuerPublicKey: dco_decode_String(arr[1]),
      name: dco_decode_String(arr[2]),
      ticker: dco_decode_String(arr[3]),
      decimals: dco_decode_u_32(arr[4]),
      maxSupply: dco_decode_U128(arr[5]),
      isFreezable: dco_decode_bool(arr[6]),
    );
  }

  @protected
  TokensPaymentDetails dco_decode_tokens_payment_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TokensPaymentDetails(
      tokenIdentifier: dco_decode_opt_String(arr[0]),
      amount: dco_decode_opt_U128(arr[1]),
    );
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  UrlSuccessActionData dco_decode_url_success_action_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return UrlSuccessActionData(
      description: dco_decode_String(arr[0]),
      url: dco_decode_String(arr[1]),
      matchesCallbackDomain: dco_decode_bool(arr[2]),
    );
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  WaitForPaymentIdentifier dco_decode_wait_for_payment_identifier(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return WaitForPaymentIdentifier_PaymentId(dco_decode_String(raw[1]));
      case 1:
        return WaitForPaymentIdentifier_PaymentRequest(dco_decode_String(raw[1]));
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  WaitForPaymentRequest dco_decode_wait_for_payment_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WaitForPaymentRequest(identifier: dco_decode_wait_for_payment_identifier(arr[0]));
  }

  @protected
  WaitForPaymentResponse dco_decode_wait_for_payment_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WaitForPaymentResponse(payment: dco_decode_payment(arr[0]));
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcStorage
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcStorageImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BreezSdk sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BreezSdkImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SdkBuilder sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SdkBuilderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BreezSdk sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BreezSdkImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SdkBuilder sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SdkBuilderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Map<String, TokenBalance> sse_decode_Map_String_token_balance_None(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_token_balance(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcStorage sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcStorageImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BreezSdk sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BreezSdkImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SdkBuilder sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SdkBuilderImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RustStreamSink<LogEntry> sse_decode_StreamSink_log_entry_Sse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<SdkEvent> sse_decode_StreamSink_sdk_event_Sse(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  BigInt sse_decode_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return BigInt.parse(inner);
  }

  @protected
  AesSuccessActionData sse_decode_aes_success_action_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_description = sse_decode_String(deserializer);
    var var_ciphertext = sse_decode_String(deserializer);
    var var_iv = sse_decode_String(deserializer);
    return AesSuccessActionData(description: var_description, ciphertext: var_ciphertext, iv: var_iv);
  }

  @protected
  AesSuccessActionDataDecrypted sse_decode_aes_success_action_data_decrypted(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_description = sse_decode_String(deserializer);
    var var_plaintext = sse_decode_String(deserializer);
    return AesSuccessActionDataDecrypted(description: var_description, plaintext: var_plaintext);
  }

  @protected
  AesSuccessActionDataResult sse_decode_aes_success_action_data_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_data = sse_decode_box_autoadd_aes_success_action_data_decrypted(deserializer);
        return AesSuccessActionDataResult_Decrypted(data: var_data);
      case 1:
        var var_reason = sse_decode_String(deserializer);
        return AesSuccessActionDataResult_ErrorStatus(reason: var_reason);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Amount sse_decode_amount(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_amountMsat = sse_decode_u_64(deserializer);
        return Amount_Bitcoin(amountMsat: var_amountMsat);
      case 1:
        var var_iso4217Code = sse_decode_String(deserializer);
        var var_fractionalAmount = sse_decode_u_64(deserializer);
        return Amount_Currency(iso4217Code: var_iso4217Code, fractionalAmount: var_fractionalAmount);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  AssetFilter sse_decode_asset_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return AssetFilter_Bitcoin();
      case 1:
        var var_tokenIdentifier = sse_decode_opt_String(deserializer);
        return AssetFilter_Token(tokenIdentifier: var_tokenIdentifier);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Bip21Details sse_decode_bip_21_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amountSat = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_assetId = sse_decode_opt_String(deserializer);
    var var_uri = sse_decode_String(deserializer);
    var var_extras = sse_decode_list_bip_21_extra(deserializer);
    var var_label = sse_decode_opt_String(deserializer);
    var var_message = sse_decode_opt_String(deserializer);
    var var_paymentMethods = sse_decode_list_input_type(deserializer);
    return Bip21Details(
      amountSat: var_amountSat,
      assetId: var_assetId,
      uri: var_uri,
      extras: var_extras,
      label: var_label,
      message: var_message,
      paymentMethods: var_paymentMethods,
    );
  }

  @protected
  Bip21Extra sse_decode_bip_21_extra(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return Bip21Extra(key: var_key, value: var_value);
  }

  @protected
  BitcoinAddressDetails sse_decode_bitcoin_address_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_network = sse_decode_bitcoin_network(deserializer);
    var var_source = sse_decode_payment_request_source(deserializer);
    return BitcoinAddressDetails(address: var_address, network: var_network, source: var_source);
  }

  @protected
  BitcoinNetwork sse_decode_bitcoin_network(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return BitcoinNetwork.values[inner];
  }

  @protected
  Bolt11Invoice sse_decode_bolt_11_invoice(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bolt11 = sse_decode_String(deserializer);
    var var_source = sse_decode_payment_request_source(deserializer);
    return Bolt11Invoice(bolt11: var_bolt11, source: var_source);
  }

  @protected
  Bolt11InvoiceDetails sse_decode_bolt_11_invoice_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amountMsat = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_descriptionHash = sse_decode_opt_String(deserializer);
    var var_expiry = sse_decode_u_64(deserializer);
    var var_invoice = sse_decode_bolt_11_invoice(deserializer);
    var var_minFinalCltvExpiryDelta = sse_decode_u_64(deserializer);
    var var_network = sse_decode_bitcoin_network(deserializer);
    var var_payeePubkey = sse_decode_String(deserializer);
    var var_paymentHash = sse_decode_String(deserializer);
    var var_paymentSecret = sse_decode_String(deserializer);
    var var_routingHints = sse_decode_list_bolt_11_route_hint(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    return Bolt11InvoiceDetails(
      amountMsat: var_amountMsat,
      description: var_description,
      descriptionHash: var_descriptionHash,
      expiry: var_expiry,
      invoice: var_invoice,
      minFinalCltvExpiryDelta: var_minFinalCltvExpiryDelta,
      network: var_network,
      payeePubkey: var_payeePubkey,
      paymentHash: var_paymentHash,
      paymentSecret: var_paymentSecret,
      routingHints: var_routingHints,
      timestamp: var_timestamp,
    );
  }

  @protected
  Bolt11RouteHint sse_decode_bolt_11_route_hint(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_hops = sse_decode_list_bolt_11_route_hint_hop(deserializer);
    return Bolt11RouteHint(hops: var_hops);
  }

  @protected
  Bolt11RouteHintHop sse_decode_bolt_11_route_hint_hop(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_srcNodeId = sse_decode_String(deserializer);
    var var_shortChannelId = sse_decode_String(deserializer);
    var var_feesBaseMsat = sse_decode_u_32(deserializer);
    var var_feesProportionalMillionths = sse_decode_u_32(deserializer);
    var var_cltvExpiryDelta = sse_decode_u_16(deserializer);
    var var_htlcMinimumMsat = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_htlcMaximumMsat = sse_decode_opt_box_autoadd_u_64(deserializer);
    return Bolt11RouteHintHop(
      srcNodeId: var_srcNodeId,
      shortChannelId: var_shortChannelId,
      feesBaseMsat: var_feesBaseMsat,
      feesProportionalMillionths: var_feesProportionalMillionths,
      cltvExpiryDelta: var_cltvExpiryDelta,
      htlcMinimumMsat: var_htlcMinimumMsat,
      htlcMaximumMsat: var_htlcMaximumMsat,
    );
  }

  @protected
  Bolt12Invoice sse_decode_bolt_12_invoice(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_invoice = sse_decode_String(deserializer);
    var var_source = sse_decode_payment_request_source(deserializer);
    return Bolt12Invoice(invoice: var_invoice, source: var_source);
  }

  @protected
  Bolt12InvoiceDetails sse_decode_bolt_12_invoice_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amountMsat = sse_decode_u_64(deserializer);
    var var_invoice = sse_decode_bolt_12_invoice(deserializer);
    return Bolt12InvoiceDetails(amountMsat: var_amountMsat, invoice: var_invoice);
  }

  @protected
  Bolt12InvoiceRequestDetails sse_decode_bolt_12_invoice_request_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Bolt12InvoiceRequestDetails();
  }

  @protected
  Bolt12Offer sse_decode_bolt_12_offer(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_offer = sse_decode_String(deserializer);
    var var_source = sse_decode_payment_request_source(deserializer);
    return Bolt12Offer(offer: var_offer, source: var_source);
  }

  @protected
  Bolt12OfferBlindedPath sse_decode_bolt_12_offer_blinded_path(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_blindedHops = sse_decode_list_String(deserializer);
    return Bolt12OfferBlindedPath(blindedHops: var_blindedHops);
  }

  @protected
  Bolt12OfferDetails sse_decode_bolt_12_offer_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_absoluteExpiry = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_chains = sse_decode_list_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    var var_issuer = sse_decode_opt_String(deserializer);
    var var_minAmount = sse_decode_opt_box_autoadd_amount(deserializer);
    var var_offer = sse_decode_bolt_12_offer(deserializer);
    var var_paths = sse_decode_list_bolt_12_offer_blinded_path(deserializer);
    var var_signingPubkey = sse_decode_opt_String(deserializer);
    return Bolt12OfferDetails(
      absoluteExpiry: var_absoluteExpiry,
      chains: var_chains,
      description: var_description,
      issuer: var_issuer,
      minAmount: var_minAmount,
      offer: var_offer,
      paths: var_paths,
      signingPubkey: var_signingPubkey,
    );
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AesSuccessActionData sse_decode_box_autoadd_aes_success_action_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_aes_success_action_data(deserializer));
  }

  @protected
  AesSuccessActionDataDecrypted sse_decode_box_autoadd_aes_success_action_data_decrypted(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_aes_success_action_data_decrypted(deserializer));
  }

  @protected
  AesSuccessActionDataResult sse_decode_box_autoadd_aes_success_action_data_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_aes_success_action_data_result(deserializer));
  }

  @protected
  Amount sse_decode_box_autoadd_amount(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_amount(deserializer));
  }

  @protected
  AssetFilter sse_decode_box_autoadd_asset_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_asset_filter(deserializer));
  }

  @protected
  Bip21Details sse_decode_box_autoadd_bip_21_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bip_21_details(deserializer));
  }

  @protected
  BitcoinAddressDetails sse_decode_box_autoadd_bitcoin_address_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bitcoin_address_details(deserializer));
  }

  @protected
  Bolt11InvoiceDetails sse_decode_box_autoadd_bolt_11_invoice_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bolt_11_invoice_details(deserializer));
  }

  @protected
  Bolt12InvoiceDetails sse_decode_box_autoadd_bolt_12_invoice_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bolt_12_invoice_details(deserializer));
  }

  @protected
  Bolt12InvoiceRequestDetails sse_decode_box_autoadd_bolt_12_invoice_request_details(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bolt_12_invoice_request_details(deserializer));
  }

  @protected
  Bolt12OfferDetails sse_decode_box_autoadd_bolt_12_offer_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bolt_12_offer_details(deserializer));
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  CheckLightningAddressRequest sse_decode_box_autoadd_check_lightning_address_request(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_check_lightning_address_request(deserializer));
  }

  @protected
  ClaimDepositRequest sse_decode_box_autoadd_claim_deposit_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_claim_deposit_request(deserializer));
  }

  @protected
  Config sse_decode_box_autoadd_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_config(deserializer));
  }

  @protected
  ConnectRequest sse_decode_box_autoadd_connect_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_connect_request(deserializer));
  }

  @protected
  Credentials sse_decode_box_autoadd_credentials(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_credentials(deserializer));
  }

  @protected
  DepositClaimError sse_decode_box_autoadd_deposit_claim_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_deposit_claim_error(deserializer));
  }

  @protected
  Fee sse_decode_box_autoadd_fee(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_fee(deserializer));
  }

  @protected
  GetInfoRequest sse_decode_box_autoadd_get_info_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_get_info_request(deserializer));
  }

  @protected
  GetPaymentRequest sse_decode_box_autoadd_get_payment_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_get_payment_request(deserializer));
  }

  @protected
  GetTokensMetadataRequest sse_decode_box_autoadd_get_tokens_metadata_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_get_tokens_metadata_request(deserializer));
  }

  @protected
  LightningAddressDetails sse_decode_box_autoadd_lightning_address_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_lightning_address_details(deserializer));
  }

  @protected
  LightningAddressInfo sse_decode_box_autoadd_lightning_address_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_lightning_address_info(deserializer));
  }

  @protected
  ListPaymentsRequest sse_decode_box_autoadd_list_payments_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_list_payments_request(deserializer));
  }

  @protected
  ListUnclaimedDepositsRequest sse_decode_box_autoadd_list_unclaimed_deposits_request(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_list_unclaimed_deposits_request(deserializer));
  }

  @protected
  LnurlAuthRequestDetails sse_decode_box_autoadd_lnurl_auth_request_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_lnurl_auth_request_details(deserializer));
  }

  @protected
  LnurlPayInfo sse_decode_box_autoadd_lnurl_pay_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_lnurl_pay_info(deserializer));
  }

  @protected
  LnurlPayRequest sse_decode_box_autoadd_lnurl_pay_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_lnurl_pay_request(deserializer));
  }

  @protected
  LnurlPayRequestDetails sse_decode_box_autoadd_lnurl_pay_request_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_lnurl_pay_request_details(deserializer));
  }

  @protected
  LnurlWithdrawRequestDetails sse_decode_box_autoadd_lnurl_withdraw_request_details(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_lnurl_withdraw_request_details(deserializer));
  }

  @protected
  MessageSuccessActionData sse_decode_box_autoadd_message_success_action_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_message_success_action_data(deserializer));
  }

  @protected
  Payment sse_decode_box_autoadd_payment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_payment(deserializer));
  }

  @protected
  PaymentDetails sse_decode_box_autoadd_payment_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_payment_details(deserializer));
  }

  @protected
  PrepareLnurlPayRequest sse_decode_box_autoadd_prepare_lnurl_pay_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_prepare_lnurl_pay_request(deserializer));
  }

  @protected
  PrepareSendPaymentRequest sse_decode_box_autoadd_prepare_send_payment_request(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_prepare_send_payment_request(deserializer));
  }

  @protected
  ReceivePaymentRequest sse_decode_box_autoadd_receive_payment_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_receive_payment_request(deserializer));
  }

  @protected
  RefundDepositRequest sse_decode_box_autoadd_refund_deposit_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_refund_deposit_request(deserializer));
  }

  @protected
  RegisterLightningAddressRequest sse_decode_box_autoadd_register_lightning_address_request(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_register_lightning_address_request(deserializer));
  }

  @protected
  SatsPaymentDetails sse_decode_box_autoadd_sats_payment_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sats_payment_details(deserializer));
  }

  @protected
  Seed sse_decode_box_autoadd_seed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_seed(deserializer));
  }

  @protected
  SendOnchainFeeQuote sse_decode_box_autoadd_send_onchain_fee_quote(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_send_onchain_fee_quote(deserializer));
  }

  @protected
  SendPaymentOptions sse_decode_box_autoadd_send_payment_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_send_payment_options(deserializer));
  }

  @protected
  SendPaymentRequest sse_decode_box_autoadd_send_payment_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_send_payment_request(deserializer));
  }

  @protected
  SilentPaymentAddressDetails sse_decode_box_autoadd_silent_payment_address_details(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_silent_payment_address_details(deserializer));
  }

  @protected
  SparkAddressDetails sse_decode_box_autoadd_spark_address_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_spark_address_details(deserializer));
  }

  @protected
  SparkAddressPaymentType sse_decode_box_autoadd_spark_address_payment_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_spark_address_payment_type(deserializer));
  }

  @protected
  SparkInvoiceFields sse_decode_box_autoadd_spark_invoice_fields(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_spark_invoice_fields(deserializer));
  }

  @protected
  SuccessAction sse_decode_box_autoadd_success_action(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_success_action(deserializer));
  }

  @protected
  SuccessActionProcessed sse_decode_box_autoadd_success_action_processed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_success_action_processed(deserializer));
  }

  @protected
  Symbol sse_decode_box_autoadd_symbol(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_symbol(deserializer));
  }

  @protected
  SyncWalletRequest sse_decode_box_autoadd_sync_wallet_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sync_wallet_request(deserializer));
  }

  @protected
  TokenMetadata sse_decode_box_autoadd_token_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_token_metadata(deserializer));
  }

  @protected
  TokensPaymentDetails sse_decode_box_autoadd_tokens_payment_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tokens_payment_details(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  UrlSuccessActionData sse_decode_box_autoadd_url_success_action_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_url_success_action_data(deserializer));
  }

  @protected
  WaitForPaymentRequest sse_decode_box_autoadd_wait_for_payment_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_wait_for_payment_request(deserializer));
  }

  @protected
  CheckLightningAddressRequest sse_decode_check_lightning_address_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_username = sse_decode_String(deserializer);
    return CheckLightningAddressRequest(username: var_username);
  }

  @protected
  ClaimDepositRequest sse_decode_claim_deposit_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_vout = sse_decode_u_32(deserializer);
    var var_maxFee = sse_decode_opt_box_autoadd_fee(deserializer);
    return ClaimDepositRequest(txid: var_txid, vout: var_vout, maxFee: var_maxFee);
  }

  @protected
  ClaimDepositResponse sse_decode_claim_deposit_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_payment = sse_decode_payment(deserializer);
    return ClaimDepositResponse(payment: var_payment);
  }

  @protected
  Config sse_decode_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_apiKey = sse_decode_opt_String(deserializer);
    var var_network = sse_decode_network(deserializer);
    var var_syncIntervalSecs = sse_decode_u_32(deserializer);
    var var_maxDepositClaimFee = sse_decode_opt_box_autoadd_fee(deserializer);
    var var_lnurlDomain = sse_decode_opt_String(deserializer);
    var var_preferSparkOverLightning = sse_decode_bool(deserializer);
    var var_externalInputParsers = sse_decode_opt_list_external_input_parser(deserializer);
    var var_useDefaultExternalInputParsers = sse_decode_bool(deserializer);
    return Config(
      apiKey: var_apiKey,
      network: var_network,
      syncIntervalSecs: var_syncIntervalSecs,
      maxDepositClaimFee: var_maxDepositClaimFee,
      lnurlDomain: var_lnurlDomain,
      preferSparkOverLightning: var_preferSparkOverLightning,
      externalInputParsers: var_externalInputParsers,
      useDefaultExternalInputParsers: var_useDefaultExternalInputParsers,
    );
  }

  @protected
  ConnectRequest sse_decode_connect_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_config = sse_decode_config(deserializer);
    var var_seed = sse_decode_seed(deserializer);
    var var_storageDir = sse_decode_String(deserializer);
    return ConnectRequest(config: var_config, seed: var_seed, storageDir: var_storageDir);
  }

  @protected
  Credentials sse_decode_credentials(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_username = sse_decode_String(deserializer);
    var var_password = sse_decode_String(deserializer);
    return Credentials(username: var_username, password: var_password);
  }

  @protected
  CurrencyInfo sse_decode_currency_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_fractionSize = sse_decode_u_32(deserializer);
    var var_spacing = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_symbol = sse_decode_opt_box_autoadd_symbol(deserializer);
    var var_uniqSymbol = sse_decode_opt_box_autoadd_symbol(deserializer);
    var var_localizedName = sse_decode_list_localized_name(deserializer);
    var var_localeOverrides = sse_decode_list_locale_overrides(deserializer);
    return CurrencyInfo(
      name: var_name,
      fractionSize: var_fractionSize,
      spacing: var_spacing,
      symbol: var_symbol,
      uniqSymbol: var_uniqSymbol,
      localizedName: var_localizedName,
      localeOverrides: var_localeOverrides,
    );
  }

  @protected
  DepositClaimError sse_decode_deposit_claim_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_tx = sse_decode_String(deserializer);
        var var_vout = sse_decode_u_32(deserializer);
        var var_maxFee = sse_decode_box_autoadd_fee(deserializer);
        var var_actualFee = sse_decode_u_64(deserializer);
        return DepositClaimError_DepositClaimFeeExceeded(
          tx: var_tx,
          vout: var_vout,
          maxFee: var_maxFee,
          actualFee: var_actualFee,
        );
      case 1:
        var var_tx = sse_decode_String(deserializer);
        var var_vout = sse_decode_u_32(deserializer);
        return DepositClaimError_MissingUtxo(tx: var_tx, vout: var_vout);
      case 2:
        var var_message = sse_decode_String(deserializer);
        return DepositClaimError_Generic(message: var_message);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  DepositInfo sse_decode_deposit_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_vout = sse_decode_u_32(deserializer);
    var var_amountSats = sse_decode_u_64(deserializer);
    var var_refundTx = sse_decode_opt_String(deserializer);
    var var_refundTxId = sse_decode_opt_String(deserializer);
    var var_claimError = sse_decode_opt_box_autoadd_deposit_claim_error(deserializer);
    return DepositInfo(
      txid: var_txid,
      vout: var_vout,
      amountSats: var_amountSats,
      refundTx: var_refundTx,
      refundTxId: var_refundTxId,
      claimError: var_claimError,
    );
  }

  @protected
  ExternalInputParser sse_decode_external_input_parser(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_providerId = sse_decode_String(deserializer);
    var var_inputRegex = sse_decode_String(deserializer);
    var var_parserUrl = sse_decode_String(deserializer);
    return ExternalInputParser(
      providerId: var_providerId,
      inputRegex: var_inputRegex,
      parserUrl: var_parserUrl,
    );
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  Fee sse_decode_fee(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_amount = sse_decode_u_64(deserializer);
        return Fee_Fixed(amount: var_amount);
      case 1:
        var var_satPerVbyte = sse_decode_u_64(deserializer);
        return Fee_Rate(satPerVbyte: var_satPerVbyte);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  FiatCurrency sse_decode_fiat_currency(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_info = sse_decode_currency_info(deserializer);
    return FiatCurrency(id: var_id, info: var_info);
  }

  @protected
  GetInfoRequest sse_decode_get_info_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_ensureSynced = sse_decode_opt_box_autoadd_bool(deserializer);
    return GetInfoRequest(ensureSynced: var_ensureSynced);
  }

  @protected
  GetInfoResponse sse_decode_get_info_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_balanceSats = sse_decode_u_64(deserializer);
    var var_tokenBalances = sse_decode_Map_String_token_balance_None(deserializer);
    return GetInfoResponse(balanceSats: var_balanceSats, tokenBalances: var_tokenBalances);
  }

  @protected
  GetPaymentRequest sse_decode_get_payment_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_paymentId = sse_decode_String(deserializer);
    return GetPaymentRequest(paymentId: var_paymentId);
  }

  @protected
  GetPaymentResponse sse_decode_get_payment_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_payment = sse_decode_payment(deserializer);
    return GetPaymentResponse(payment: var_payment);
  }

  @protected
  GetTokensMetadataRequest sse_decode_get_tokens_metadata_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tokenIdentifiers = sse_decode_list_String(deserializer);
    return GetTokensMetadataRequest(tokenIdentifiers: var_tokenIdentifiers);
  }

  @protected
  GetTokensMetadataResponse sse_decode_get_tokens_metadata_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tokensMetadata = sse_decode_list_token_metadata(deserializer);
    return GetTokensMetadataResponse(tokensMetadata: var_tokensMetadata);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  InputType sse_decode_input_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_bitcoin_address_details(deserializer);
        return InputType_BitcoinAddress(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_bolt_11_invoice_details(deserializer);
        return InputType_Bolt11Invoice(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_bolt_12_invoice_details(deserializer);
        return InputType_Bolt12Invoice(var_field0);
      case 3:
        var var_field0 = sse_decode_box_autoadd_bolt_12_offer_details(deserializer);
        return InputType_Bolt12Offer(var_field0);
      case 4:
        var var_field0 = sse_decode_box_autoadd_lightning_address_details(deserializer);
        return InputType_LightningAddress(var_field0);
      case 5:
        var var_field0 = sse_decode_box_autoadd_lnurl_pay_request_details(deserializer);
        return InputType_LnurlPay(var_field0);
      case 6:
        var var_field0 = sse_decode_box_autoadd_silent_payment_address_details(deserializer);
        return InputType_SilentPaymentAddress(var_field0);
      case 7:
        var var_field0 = sse_decode_box_autoadd_lnurl_auth_request_details(deserializer);
        return InputType_LnurlAuth(var_field0);
      case 8:
        var var_field0 = sse_decode_String(deserializer);
        return InputType_Url(var_field0);
      case 9:
        var var_field0 = sse_decode_box_autoadd_bip_21_details(deserializer);
        return InputType_Bip21(var_field0);
      case 10:
        var var_field0 = sse_decode_box_autoadd_bolt_12_invoice_request_details(deserializer);
        return InputType_Bolt12InvoiceRequest(var_field0);
      case 11:
        var var_field0 = sse_decode_box_autoadd_lnurl_withdraw_request_details(deserializer);
        return InputType_LnurlWithdraw(var_field0);
      case 12:
        var var_field0 = sse_decode_box_autoadd_spark_address_details(deserializer);
        return InputType_SparkAddress(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  KeySetType sse_decode_key_set_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return KeySetType.values[inner];
  }

  @protected
  LightningAddressDetails sse_decode_lightning_address_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_payRequest = sse_decode_lnurl_pay_request_details(deserializer);
    return LightningAddressDetails(address: var_address, payRequest: var_payRequest);
  }

  @protected
  LightningAddressInfo sse_decode_lightning_address_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_description = sse_decode_String(deserializer);
    var var_lightningAddress = sse_decode_String(deserializer);
    var var_lnurl = sse_decode_String(deserializer);
    var var_username = sse_decode_String(deserializer);
    return LightningAddressInfo(
      description: var_description,
      lightningAddress: var_lightningAddress,
      lnurl: var_lnurl,
      username: var_username,
    );
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<Bip21Extra> sse_decode_list_bip_21_extra(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Bip21Extra>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bip_21_extra(deserializer));
    }
    return ans_;
  }

  @protected
  List<Bolt11RouteHint> sse_decode_list_bolt_11_route_hint(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Bolt11RouteHint>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bolt_11_route_hint(deserializer));
    }
    return ans_;
  }

  @protected
  List<Bolt11RouteHintHop> sse_decode_list_bolt_11_route_hint_hop(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Bolt11RouteHintHop>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bolt_11_route_hint_hop(deserializer));
    }
    return ans_;
  }

  @protected
  List<Bolt12OfferBlindedPath> sse_decode_list_bolt_12_offer_blinded_path(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Bolt12OfferBlindedPath>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_bolt_12_offer_blinded_path(deserializer));
    }
    return ans_;
  }

  @protected
  List<DepositInfo> sse_decode_list_deposit_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DepositInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_deposit_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<ExternalInputParser> sse_decode_list_external_input_parser(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ExternalInputParser>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_external_input_parser(deserializer));
    }
    return ans_;
  }

  @protected
  ListFiatCurrenciesResponse sse_decode_list_fiat_currencies_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_currencies = sse_decode_list_fiat_currency(deserializer);
    return ListFiatCurrenciesResponse(currencies: var_currencies);
  }

  @protected
  List<FiatCurrency> sse_decode_list_fiat_currency(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FiatCurrency>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_fiat_currency(deserializer));
    }
    return ans_;
  }

  @protected
  ListFiatRatesResponse sse_decode_list_fiat_rates_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_rates = sse_decode_list_rate(deserializer);
    return ListFiatRatesResponse(rates: var_rates);
  }

  @protected
  List<InputType> sse_decode_list_input_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <InputType>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_input_type(deserializer));
    }
    return ans_;
  }

  @protected
  List<LocaleOverrides> sse_decode_list_locale_overrides(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LocaleOverrides>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_locale_overrides(deserializer));
    }
    return ans_;
  }

  @protected
  List<LocalizedName> sse_decode_list_localized_name(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LocalizedName>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_localized_name(deserializer));
    }
    return ans_;
  }

  @protected
  List<Payment> sse_decode_list_payment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Payment>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_payment(deserializer));
    }
    return ans_;
  }

  @protected
  List<PaymentStatus> sse_decode_list_payment_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PaymentStatus>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_payment_status(deserializer));
    }
    return ans_;
  }

  @protected
  List<PaymentType> sse_decode_list_payment_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PaymentType>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_payment_type(deserializer));
    }
    return ans_;
  }

  @protected
  ListPaymentsRequest sse_decode_list_payments_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_typeFilter = sse_decode_opt_list_payment_type(deserializer);
    var var_statusFilter = sse_decode_opt_list_payment_status(deserializer);
    var var_assetFilter = sse_decode_opt_box_autoadd_asset_filter(deserializer);
    var var_fromTimestamp = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_toTimestamp = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_offset = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_limit = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_sortAscending = sse_decode_opt_box_autoadd_bool(deserializer);
    return ListPaymentsRequest(
      typeFilter: var_typeFilter,
      statusFilter: var_statusFilter,
      assetFilter: var_assetFilter,
      fromTimestamp: var_fromTimestamp,
      toTimestamp: var_toTimestamp,
      offset: var_offset,
      limit: var_limit,
      sortAscending: var_sortAscending,
    );
  }

  @protected
  ListPaymentsResponse sse_decode_list_payments_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_payments = sse_decode_list_payment(deserializer);
    return ListPaymentsResponse(payments: var_payments);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<Rate> sse_decode_list_rate(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Rate>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_rate(deserializer));
    }
    return ans_;
  }

  @protected
  List<(String, TokenBalance)> sse_decode_list_record_string_token_balance(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, TokenBalance)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_token_balance(deserializer));
    }
    return ans_;
  }

  @protected
  List<TokenMetadata> sse_decode_list_token_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TokenMetadata>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_token_metadata(deserializer));
    }
    return ans_;
  }

  @protected
  ListUnclaimedDepositsRequest sse_decode_list_unclaimed_deposits_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ListUnclaimedDepositsRequest();
  }

  @protected
  ListUnclaimedDepositsResponse sse_decode_list_unclaimed_deposits_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_deposits = sse_decode_list_deposit_info(deserializer);
    return ListUnclaimedDepositsResponse(deposits: var_deposits);
  }

  @protected
  LnurlAuthRequestDetails sse_decode_lnurl_auth_request_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_k1 = sse_decode_String(deserializer);
    var var_action = sse_decode_opt_String(deserializer);
    var var_domain = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    return LnurlAuthRequestDetails(k1: var_k1, action: var_action, domain: var_domain, url: var_url);
  }

  @protected
  LnurlPayInfo sse_decode_lnurl_pay_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_lnAddress = sse_decode_opt_String(deserializer);
    var var_comment = sse_decode_opt_String(deserializer);
    var var_domain = sse_decode_opt_String(deserializer);
    var var_metadata = sse_decode_opt_String(deserializer);
    var var_processedSuccessAction = sse_decode_opt_box_autoadd_success_action_processed(deserializer);
    var var_rawSuccessAction = sse_decode_opt_box_autoadd_success_action(deserializer);
    return LnurlPayInfo(
      lnAddress: var_lnAddress,
      comment: var_comment,
      domain: var_domain,
      metadata: var_metadata,
      processedSuccessAction: var_processedSuccessAction,
      rawSuccessAction: var_rawSuccessAction,
    );
  }

  @protected
  LnurlPayRequest sse_decode_lnurl_pay_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_prepareResponse = sse_decode_prepare_lnurl_pay_response(deserializer);
    return LnurlPayRequest(prepareResponse: var_prepareResponse);
  }

  @protected
  LnurlPayRequestDetails sse_decode_lnurl_pay_request_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_callback = sse_decode_String(deserializer);
    var var_minSendable = sse_decode_u_64(deserializer);
    var var_maxSendable = sse_decode_u_64(deserializer);
    var var_metadataStr = sse_decode_String(deserializer);
    var var_commentAllowed = sse_decode_u_16(deserializer);
    var var_domain = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_address = sse_decode_opt_String(deserializer);
    var var_allowsNostr = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_nostrPubkey = sse_decode_opt_String(deserializer);
    return LnurlPayRequestDetails(
      callback: var_callback,
      minSendable: var_minSendable,
      maxSendable: var_maxSendable,
      metadataStr: var_metadataStr,
      commentAllowed: var_commentAllowed,
      domain: var_domain,
      url: var_url,
      address: var_address,
      allowsNostr: var_allowsNostr,
      nostrPubkey: var_nostrPubkey,
    );
  }

  @protected
  LnurlPayResponse sse_decode_lnurl_pay_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_payment = sse_decode_payment(deserializer);
    var var_successAction = sse_decode_opt_box_autoadd_success_action_processed(deserializer);
    return LnurlPayResponse(payment: var_payment, successAction: var_successAction);
  }

  @protected
  LnurlWithdrawRequestDetails sse_decode_lnurl_withdraw_request_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_callback = sse_decode_String(deserializer);
    var var_k1 = sse_decode_String(deserializer);
    var var_defaultDescription = sse_decode_String(deserializer);
    var var_minWithdrawable = sse_decode_u_64(deserializer);
    var var_maxWithdrawable = sse_decode_u_64(deserializer);
    return LnurlWithdrawRequestDetails(
      callback: var_callback,
      k1: var_k1,
      defaultDescription: var_defaultDescription,
      minWithdrawable: var_minWithdrawable,
      maxWithdrawable: var_maxWithdrawable,
    );
  }

  @protected
  LocaleOverrides sse_decode_locale_overrides(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_locale = sse_decode_String(deserializer);
    var var_spacing = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_symbol = sse_decode_symbol(deserializer);
    return LocaleOverrides(locale: var_locale, spacing: var_spacing, symbol: var_symbol);
  }

  @protected
  LocalizedName sse_decode_localized_name(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_locale = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    return LocalizedName(locale: var_locale, name: var_name);
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_line = sse_decode_String(deserializer);
    var var_level = sse_decode_String(deserializer);
    return LogEntry(line: var_line, level: var_level);
  }

  @protected
  MessageSuccessActionData sse_decode_message_success_action_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_String(deserializer);
    return MessageSuccessActionData(message: var_message);
  }

  @protected
  Network sse_decode_network(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Network.values[inner];
  }

  @protected
  OnchainConfirmationSpeed sse_decode_onchain_confirmation_speed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return OnchainConfirmationSpeed.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_U128(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_U128(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Amount? sse_decode_opt_box_autoadd_amount(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_amount(deserializer));
    } else {
      return null;
    }
  }

  @protected
  AssetFilter? sse_decode_opt_box_autoadd_asset_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_asset_filter(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Credentials? sse_decode_opt_box_autoadd_credentials(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_credentials(deserializer));
    } else {
      return null;
    }
  }

  @protected
  DepositClaimError? sse_decode_opt_box_autoadd_deposit_claim_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_deposit_claim_error(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Fee? sse_decode_opt_box_autoadd_fee(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_fee(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LightningAddressInfo? sse_decode_opt_box_autoadd_lightning_address_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_lightning_address_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  LnurlPayInfo? sse_decode_opt_box_autoadd_lnurl_pay_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_lnurl_pay_info(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PaymentDetails? sse_decode_opt_box_autoadd_payment_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_payment_details(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SendPaymentOptions? sse_decode_opt_box_autoadd_send_payment_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_send_payment_options(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SparkAddressPaymentType? sse_decode_opt_box_autoadd_spark_address_payment_type(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_spark_address_payment_type(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SparkInvoiceFields? sse_decode_opt_box_autoadd_spark_invoice_fields(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_spark_invoice_fields(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SuccessAction? sse_decode_opt_box_autoadd_success_action(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_success_action(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SuccessActionProcessed? sse_decode_opt_box_autoadd_success_action_processed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_success_action_processed(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Symbol? sse_decode_opt_box_autoadd_symbol(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_symbol(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<ExternalInputParser>? sse_decode_opt_list_external_input_parser(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_external_input_parser(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<PaymentStatus>? sse_decode_opt_list_payment_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_payment_status(deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<PaymentType>? sse_decode_opt_list_payment_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_payment_type(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Payment sse_decode_payment(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_paymentType = sse_decode_payment_type(deserializer);
    var var_status = sse_decode_payment_status(deserializer);
    var var_amount = sse_decode_U128(deserializer);
    var var_fees = sse_decode_U128(deserializer);
    var var_timestamp = sse_decode_u_64(deserializer);
    var var_method = sse_decode_payment_method(deserializer);
    var var_details = sse_decode_opt_box_autoadd_payment_details(deserializer);
    return Payment(
      id: var_id,
      paymentType: var_paymentType,
      status: var_status,
      amount: var_amount,
      fees: var_fees,
      timestamp: var_timestamp,
      method: var_method,
      details: var_details,
    );
  }

  @protected
  PaymentDetails sse_decode_payment_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return PaymentDetails_Spark();
      case 1:
        var var_metadata = sse_decode_box_autoadd_token_metadata(deserializer);
        var var_txHash = sse_decode_String(deserializer);
        return PaymentDetails_Token(metadata: var_metadata, txHash: var_txHash);
      case 2:
        var var_description = sse_decode_opt_String(deserializer);
        var var_preimage = sse_decode_opt_String(deserializer);
        var var_invoice = sse_decode_String(deserializer);
        var var_paymentHash = sse_decode_String(deserializer);
        var var_destinationPubkey = sse_decode_String(deserializer);
        var var_lnurlPayInfo = sse_decode_opt_box_autoadd_lnurl_pay_info(deserializer);
        return PaymentDetails_Lightning(
          description: var_description,
          preimage: var_preimage,
          invoice: var_invoice,
          paymentHash: var_paymentHash,
          destinationPubkey: var_destinationPubkey,
          lnurlPayInfo: var_lnurlPayInfo,
        );
      case 3:
        var var_txId = sse_decode_String(deserializer);
        return PaymentDetails_Withdraw(txId: var_txId);
      case 4:
        var var_txId = sse_decode_String(deserializer);
        return PaymentDetails_Deposit(txId: var_txId);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  PaymentMethod sse_decode_payment_method(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PaymentMethod.values[inner];
  }

  @protected
  PaymentRequestSource sse_decode_payment_request_source(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bip21Uri = sse_decode_opt_String(deserializer);
    var var_bip353Address = sse_decode_opt_String(deserializer);
    return PaymentRequestSource(bip21Uri: var_bip21Uri, bip353Address: var_bip353Address);
  }

  @protected
  PaymentStatus sse_decode_payment_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PaymentStatus.values[inner];
  }

  @protected
  PaymentType sse_decode_payment_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PaymentType.values[inner];
  }

  @protected
  PrepareLnurlPayRequest sse_decode_prepare_lnurl_pay_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amountSats = sse_decode_u_64(deserializer);
    var var_payRequest = sse_decode_lnurl_pay_request_details(deserializer);
    var var_comment = sse_decode_opt_String(deserializer);
    var var_validateSuccessActionUrl = sse_decode_opt_box_autoadd_bool(deserializer);
    return PrepareLnurlPayRequest(
      amountSats: var_amountSats,
      payRequest: var_payRequest,
      comment: var_comment,
      validateSuccessActionUrl: var_validateSuccessActionUrl,
    );
  }

  @protected
  PrepareLnurlPayResponse sse_decode_prepare_lnurl_pay_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amountSats = sse_decode_u_64(deserializer);
    var var_comment = sse_decode_opt_String(deserializer);
    var var_payRequest = sse_decode_lnurl_pay_request_details(deserializer);
    var var_feeSats = sse_decode_u_64(deserializer);
    var var_invoiceDetails = sse_decode_bolt_11_invoice_details(deserializer);
    var var_successAction = sse_decode_opt_box_autoadd_success_action(deserializer);
    return PrepareLnurlPayResponse(
      amountSats: var_amountSats,
      comment: var_comment,
      payRequest: var_payRequest,
      feeSats: var_feeSats,
      invoiceDetails: var_invoiceDetails,
      successAction: var_successAction,
    );
  }

  @protected
  PrepareSendPaymentRequest sse_decode_prepare_send_payment_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_paymentRequest = sse_decode_String(deserializer);
    var var_amount = sse_decode_opt_U128(deserializer);
    var var_tokenIdentifier = sse_decode_opt_String(deserializer);
    return PrepareSendPaymentRequest(
      paymentRequest: var_paymentRequest,
      amount: var_amount,
      tokenIdentifier: var_tokenIdentifier,
    );
  }

  @protected
  PrepareSendPaymentResponse sse_decode_prepare_send_payment_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_paymentMethod = sse_decode_send_payment_method(deserializer);
    var var_amount = sse_decode_U128(deserializer);
    var var_tokenIdentifier = sse_decode_opt_String(deserializer);
    return PrepareSendPaymentResponse(
      paymentMethod: var_paymentMethod,
      amount: var_amount,
      tokenIdentifier: var_tokenIdentifier,
    );
  }

  @protected
  Rate sse_decode_rate(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_coin = sse_decode_String(deserializer);
    var var_value = sse_decode_f_64(deserializer);
    return Rate(coin: var_coin, value: var_value);
  }

  @protected
  ReceivePaymentMethod sse_decode_receive_payment_method(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return ReceivePaymentMethod_SparkAddress();
      case 1:
        return ReceivePaymentMethod_BitcoinAddress();
      case 2:
        var var_description = sse_decode_String(deserializer);
        var var_amountSats = sse_decode_opt_box_autoadd_u_64(deserializer);
        return ReceivePaymentMethod_Bolt11Invoice(description: var_description, amountSats: var_amountSats);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ReceivePaymentRequest sse_decode_receive_payment_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_paymentMethod = sse_decode_receive_payment_method(deserializer);
    return ReceivePaymentRequest(paymentMethod: var_paymentMethod);
  }

  @protected
  ReceivePaymentResponse sse_decode_receive_payment_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_paymentRequest = sse_decode_String(deserializer);
    var var_feeSats = sse_decode_u_64(deserializer);
    return ReceivePaymentResponse(paymentRequest: var_paymentRequest, feeSats: var_feeSats);
  }

  @protected
  (String, TokenBalance) sse_decode_record_string_token_balance(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_token_balance(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  RefundDepositRequest sse_decode_refund_deposit_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_vout = sse_decode_u_32(deserializer);
    var var_destinationAddress = sse_decode_String(deserializer);
    var var_fee = sse_decode_fee(deserializer);
    return RefundDepositRequest(
      txid: var_txid,
      vout: var_vout,
      destinationAddress: var_destinationAddress,
      fee: var_fee,
    );
  }

  @protected
  RefundDepositResponse sse_decode_refund_deposit_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txId = sse_decode_String(deserializer);
    var var_txHex = sse_decode_String(deserializer);
    return RefundDepositResponse(txId: var_txId, txHex: var_txHex);
  }

  @protected
  RegisterLightningAddressRequest sse_decode_register_lightning_address_request(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_username = sse_decode_String(deserializer);
    var var_description = sse_decode_opt_String(deserializer);
    return RegisterLightningAddressRequest(username: var_username, description: var_description);
  }

  @protected
  SatsPaymentDetails sse_decode_sats_payment_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_amount = sse_decode_opt_box_autoadd_u_64(deserializer);
    return SatsPaymentDetails(amount: var_amount);
  }

  @protected
  SdkError sse_decode_sdk_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return SdkError_SparkError(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return SdkError_InvalidUuid(var_field0);
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return SdkError_InvalidInput(var_field0);
      case 3:
        var var_field0 = sse_decode_String(deserializer);
        return SdkError_NetworkError(var_field0);
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return SdkError_StorageError(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return SdkError_ChainServiceError(var_field0);
      case 6:
        var var_tx = sse_decode_String(deserializer);
        var var_vout = sse_decode_u_32(deserializer);
        var var_maxFee = sse_decode_box_autoadd_fee(deserializer);
        var var_actualFee = sse_decode_u_64(deserializer);
        return SdkError_DepositClaimFeeExceeded(
          tx: var_tx,
          vout: var_vout,
          maxFee: var_maxFee,
          actualFee: var_actualFee,
        );
      case 7:
        var var_tx = sse_decode_String(deserializer);
        var var_vout = sse_decode_u_32(deserializer);
        return SdkError_MissingUtxo(tx: var_tx, vout: var_vout);
      case 8:
        var var_field0 = sse_decode_String(deserializer);
        return SdkError_LnurlError(var_field0);
      case 9:
        var var_field0 = sse_decode_String(deserializer);
        return SdkError_Generic(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SdkEvent sse_decode_sdk_event(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return SdkEvent_Synced();
      case 1:
        var var_unclaimedDeposits = sse_decode_list_deposit_info(deserializer);
        return SdkEvent_ClaimDepositsFailed(unclaimedDeposits: var_unclaimedDeposits);
      case 2:
        var var_claimedDeposits = sse_decode_list_deposit_info(deserializer);
        return SdkEvent_ClaimDepositsSucceeded(claimedDeposits: var_claimedDeposits);
      case 3:
        var var_payment = sse_decode_box_autoadd_payment(deserializer);
        return SdkEvent_PaymentSucceeded(payment: var_payment);
      case 4:
        var var_payment = sse_decode_box_autoadd_payment(deserializer);
        return SdkEvent_PaymentFailed(payment: var_payment);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Seed sse_decode_seed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_mnemonic = sse_decode_String(deserializer);
        var var_passphrase = sse_decode_opt_String(deserializer);
        return Seed_Mnemonic(mnemonic: var_mnemonic, passphrase: var_passphrase);
      case 1:
        var var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
        return Seed_Entropy(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SendOnchainFeeQuote sse_decode_send_onchain_fee_quote(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_expiresAt = sse_decode_u_64(deserializer);
    var var_speedFast = sse_decode_send_onchain_speed_fee_quote(deserializer);
    var var_speedMedium = sse_decode_send_onchain_speed_fee_quote(deserializer);
    var var_speedSlow = sse_decode_send_onchain_speed_fee_quote(deserializer);
    return SendOnchainFeeQuote(
      id: var_id,
      expiresAt: var_expiresAt,
      speedFast: var_speedFast,
      speedMedium: var_speedMedium,
      speedSlow: var_speedSlow,
    );
  }

  @protected
  SendOnchainSpeedFeeQuote sse_decode_send_onchain_speed_fee_quote(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_userFeeSat = sse_decode_u_64(deserializer);
    var var_l1BroadcastFeeSat = sse_decode_u_64(deserializer);
    return SendOnchainSpeedFeeQuote(userFeeSat: var_userFeeSat, l1BroadcastFeeSat: var_l1BroadcastFeeSat);
  }

  @protected
  SendPaymentMethod sse_decode_send_payment_method(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_address = sse_decode_box_autoadd_bitcoin_address_details(deserializer);
        var var_feeQuote = sse_decode_box_autoadd_send_onchain_fee_quote(deserializer);
        return SendPaymentMethod_BitcoinAddress(address: var_address, feeQuote: var_feeQuote);
      case 1:
        var var_invoiceDetails = sse_decode_box_autoadd_bolt_11_invoice_details(deserializer);
        var var_sparkTransferFeeSats = sse_decode_opt_box_autoadd_u_64(deserializer);
        var var_lightningFeeSats = sse_decode_u_64(deserializer);
        return SendPaymentMethod_Bolt11Invoice(
          invoiceDetails: var_invoiceDetails,
          sparkTransferFeeSats: var_sparkTransferFeeSats,
          lightningFeeSats: var_lightningFeeSats,
        );
      case 2:
        var var_address = sse_decode_String(deserializer);
        var var_fee = sse_decode_U128(deserializer);
        var var_tokenIdentifier = sse_decode_opt_String(deserializer);
        return SendPaymentMethod_SparkAddress(
          address: var_address,
          fee: var_fee,
          tokenIdentifier: var_tokenIdentifier,
        );
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SendPaymentOptions sse_decode_send_payment_options(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_confirmationSpeed = sse_decode_onchain_confirmation_speed(deserializer);
        return SendPaymentOptions_BitcoinAddress(confirmationSpeed: var_confirmationSpeed);
      case 1:
        var var_preferSpark = sse_decode_bool(deserializer);
        var var_completionTimeoutSecs = sse_decode_opt_box_autoadd_u_32(deserializer);
        return SendPaymentOptions_Bolt11Invoice(
          preferSpark: var_preferSpark,
          completionTimeoutSecs: var_completionTimeoutSecs,
        );
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SendPaymentRequest sse_decode_send_payment_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_prepareResponse = sse_decode_prepare_send_payment_response(deserializer);
    var var_options = sse_decode_opt_box_autoadd_send_payment_options(deserializer);
    return SendPaymentRequest(prepareResponse: var_prepareResponse, options: var_options);
  }

  @protected
  SendPaymentResponse sse_decode_send_payment_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_payment = sse_decode_payment(deserializer);
    return SendPaymentResponse(payment: var_payment);
  }

  @protected
  SilentPaymentAddressDetails sse_decode_silent_payment_address_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_network = sse_decode_bitcoin_network(deserializer);
    var var_source = sse_decode_payment_request_source(deserializer);
    return SilentPaymentAddressDetails(address: var_address, network: var_network, source: var_source);
  }

  @protected
  SparkAddress sse_decode_spark_address(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identityPublicKey = sse_decode_String(deserializer);
    var var_network = sse_decode_bitcoin_network(deserializer);
    var var_sparkInvoiceFields = sse_decode_opt_box_autoadd_spark_invoice_fields(deserializer);
    var var_signature = sse_decode_opt_String(deserializer);
    return SparkAddress(
      identityPublicKey: var_identityPublicKey,
      network: var_network,
      sparkInvoiceFields: var_sparkInvoiceFields,
      signature: var_signature,
    );
  }

  @protected
  SparkAddressDetails sse_decode_spark_address_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_address = sse_decode_String(deserializer);
    var var_decodedAddress = sse_decode_spark_address(deserializer);
    var var_source = sse_decode_payment_request_source(deserializer);
    return SparkAddressDetails(address: var_address, decodedAddress: var_decodedAddress, source: var_source);
  }

  @protected
  SparkAddressPaymentType sse_decode_spark_address_payment_type(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_tokens_payment_details(deserializer);
        return SparkAddressPaymentType_TokensPayment(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_sats_payment_details(deserializer);
        return SparkAddressPaymentType_SatsPayment(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SparkInvoiceFields sse_decode_spark_invoice_fields(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_version = sse_decode_u_32(deserializer);
    var var_memo = sse_decode_opt_String(deserializer);
    var var_senderPublicKey = sse_decode_opt_String(deserializer);
    var var_expiryTime = sse_decode_opt_box_autoadd_u_64(deserializer);
    var var_paymentType = sse_decode_opt_box_autoadd_spark_address_payment_type(deserializer);
    return SparkInvoiceFields(
      id: var_id,
      version: var_version,
      memo: var_memo,
      senderPublicKey: var_senderPublicKey,
      expiryTime: var_expiryTime,
      paymentType: var_paymentType,
    );
  }

  @protected
  SuccessAction sse_decode_success_action(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_data = sse_decode_box_autoadd_aes_success_action_data(deserializer);
        return SuccessAction_Aes(data: var_data);
      case 1:
        var var_data = sse_decode_box_autoadd_message_success_action_data(deserializer);
        return SuccessAction_Message(data: var_data);
      case 2:
        var var_data = sse_decode_box_autoadd_url_success_action_data(deserializer);
        return SuccessAction_Url(data: var_data);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SuccessActionProcessed sse_decode_success_action_processed(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_result = sse_decode_box_autoadd_aes_success_action_data_result(deserializer);
        return SuccessActionProcessed_Aes(result: var_result);
      case 1:
        var var_data = sse_decode_box_autoadd_message_success_action_data(deserializer);
        return SuccessActionProcessed_Message(data: var_data);
      case 2:
        var var_data = sse_decode_box_autoadd_url_success_action_data(deserializer);
        return SuccessActionProcessed_Url(data: var_data);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  Symbol sse_decode_symbol(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_grapheme = sse_decode_opt_String(deserializer);
    var var_template = sse_decode_opt_String(deserializer);
    var var_rtl = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_position = sse_decode_opt_box_autoadd_u_32(deserializer);
    return Symbol(grapheme: var_grapheme, template: var_template, rtl: var_rtl, position: var_position);
  }

  @protected
  SyncWalletRequest sse_decode_sync_wallet_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SyncWalletRequest();
  }

  @protected
  SyncWalletResponse sse_decode_sync_wallet_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SyncWalletResponse();
  }

  @protected
  TokenBalance sse_decode_token_balance(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_balance = sse_decode_U128(deserializer);
    var var_tokenMetadata = sse_decode_token_metadata(deserializer);
    return TokenBalance(balance: var_balance, tokenMetadata: var_tokenMetadata);
  }

  @protected
  TokenMetadata sse_decode_token_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier = sse_decode_String(deserializer);
    var var_issuerPublicKey = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_ticker = sse_decode_String(deserializer);
    var var_decimals = sse_decode_u_32(deserializer);
    var var_maxSupply = sse_decode_U128(deserializer);
    var var_isFreezable = sse_decode_bool(deserializer);
    return TokenMetadata(
      identifier: var_identifier,
      issuerPublicKey: var_issuerPublicKey,
      name: var_name,
      ticker: var_ticker,
      decimals: var_decimals,
      maxSupply: var_maxSupply,
      isFreezable: var_isFreezable,
    );
  }

  @protected
  TokensPaymentDetails sse_decode_tokens_payment_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_tokenIdentifier = sse_decode_opt_String(deserializer);
    var var_amount = sse_decode_opt_U128(deserializer);
    return TokensPaymentDetails(tokenIdentifier: var_tokenIdentifier, amount: var_amount);
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  UrlSuccessActionData sse_decode_url_success_action_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_description = sse_decode_String(deserializer);
    var var_url = sse_decode_String(deserializer);
    var var_matchesCallbackDomain = sse_decode_bool(deserializer);
    return UrlSuccessActionData(
      description: var_description,
      url: var_url,
      matchesCallbackDomain: var_matchesCallbackDomain,
    );
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  WaitForPaymentIdentifier sse_decode_wait_for_payment_identifier(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return WaitForPaymentIdentifier_PaymentId(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return WaitForPaymentIdentifier_PaymentRequest(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  WaitForPaymentRequest sse_decode_wait_for_payment_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_identifier = sse_decode_wait_for_payment_identifier(deserializer);
    return WaitForPaymentRequest(identifier: var_identifier);
  }

  @protected
  WaitForPaymentResponse sse_decode_wait_for_payment_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_payment = sse_decode_payment(deserializer);
    return WaitForPaymentResponse(payment: var_payment);
  }

  @protected
  void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage(
    ArcStorage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as ArcStorageImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
    BreezSdk self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as BreezSdkImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
    SdkBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as SdkBuilderImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
    BreezSdk self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as BreezSdkImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
    SdkBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as SdkBuilderImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_Map_String_token_balance_None(Map<String, TokenBalance> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_token_balance(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcdynStorage(
    ArcStorage self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as ArcStorageImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBreezSdk(
    BreezSdk self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as BreezSdkImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSdkBuilder(
    SdkBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize((self as SdkBuilderImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_StreamSink_log_entry_Sse(RustStreamSink<LogEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(decodeSuccessData: sse_decode_log_entry, decodeErrorData: sse_decode_AnyhowException),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_sdk_event_Sse(RustStreamSink<SdkEvent> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(decodeSuccessData: sse_decode_sdk_event, decodeErrorData: sse_decode_AnyhowException),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_U128(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.toString(), serializer);
  }

  @protected
  void sse_encode_aes_success_action_data(AesSuccessActionData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.description, serializer);
    sse_encode_String(self.ciphertext, serializer);
    sse_encode_String(self.iv, serializer);
  }

  @protected
  void sse_encode_aes_success_action_data_decrypted(
    AesSuccessActionDataDecrypted self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.description, serializer);
    sse_encode_String(self.plaintext, serializer);
  }

  @protected
  void sse_encode_aes_success_action_data_result(AesSuccessActionDataResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case AesSuccessActionDataResult_Decrypted(data: final data):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_aes_success_action_data_decrypted(data, serializer);
      case AesSuccessActionDataResult_ErrorStatus(reason: final reason):
        sse_encode_i_32(1, serializer);
        sse_encode_String(reason, serializer);
    }
  }

  @protected
  void sse_encode_amount(Amount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Amount_Bitcoin(amountMsat: final amountMsat):
        sse_encode_i_32(0, serializer);
        sse_encode_u_64(amountMsat, serializer);
      case Amount_Currency(iso4217Code: final iso4217Code, fractionalAmount: final fractionalAmount):
        sse_encode_i_32(1, serializer);
        sse_encode_String(iso4217Code, serializer);
        sse_encode_u_64(fractionalAmount, serializer);
    }
  }

  @protected
  void sse_encode_asset_filter(AssetFilter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case AssetFilter_Bitcoin():
        sse_encode_i_32(0, serializer);
      case AssetFilter_Token(tokenIdentifier: final tokenIdentifier):
        sse_encode_i_32(1, serializer);
        sse_encode_opt_String(tokenIdentifier, serializer);
    }
  }

  @protected
  void sse_encode_bip_21_details(Bip21Details self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_64(self.amountSat, serializer);
    sse_encode_opt_String(self.assetId, serializer);
    sse_encode_String(self.uri, serializer);
    sse_encode_list_bip_21_extra(self.extras, serializer);
    sse_encode_opt_String(self.label, serializer);
    sse_encode_opt_String(self.message, serializer);
    sse_encode_list_input_type(self.paymentMethods, serializer);
  }

  @protected
  void sse_encode_bip_21_extra(Bip21Extra self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_bitcoin_address_details(BitcoinAddressDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_bitcoin_network(self.network, serializer);
    sse_encode_payment_request_source(self.source, serializer);
  }

  @protected
  void sse_encode_bitcoin_network(BitcoinNetwork self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bolt_11_invoice(Bolt11Invoice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.bolt11, serializer);
    sse_encode_payment_request_source(self.source, serializer);
  }

  @protected
  void sse_encode_bolt_11_invoice_details(Bolt11InvoiceDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_64(self.amountMsat, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_opt_String(self.descriptionHash, serializer);
    sse_encode_u_64(self.expiry, serializer);
    sse_encode_bolt_11_invoice(self.invoice, serializer);
    sse_encode_u_64(self.minFinalCltvExpiryDelta, serializer);
    sse_encode_bitcoin_network(self.network, serializer);
    sse_encode_String(self.payeePubkey, serializer);
    sse_encode_String(self.paymentHash, serializer);
    sse_encode_String(self.paymentSecret, serializer);
    sse_encode_list_bolt_11_route_hint(self.routingHints, serializer);
    sse_encode_u_64(self.timestamp, serializer);
  }

  @protected
  void sse_encode_bolt_11_route_hint(Bolt11RouteHint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_bolt_11_route_hint_hop(self.hops, serializer);
  }

  @protected
  void sse_encode_bolt_11_route_hint_hop(Bolt11RouteHintHop self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.srcNodeId, serializer);
    sse_encode_String(self.shortChannelId, serializer);
    sse_encode_u_32(self.feesBaseMsat, serializer);
    sse_encode_u_32(self.feesProportionalMillionths, serializer);
    sse_encode_u_16(self.cltvExpiryDelta, serializer);
    sse_encode_opt_box_autoadd_u_64(self.htlcMinimumMsat, serializer);
    sse_encode_opt_box_autoadd_u_64(self.htlcMaximumMsat, serializer);
  }

  @protected
  void sse_encode_bolt_12_invoice(Bolt12Invoice self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.invoice, serializer);
    sse_encode_payment_request_source(self.source, serializer);
  }

  @protected
  void sse_encode_bolt_12_invoice_details(Bolt12InvoiceDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.amountMsat, serializer);
    sse_encode_bolt_12_invoice(self.invoice, serializer);
  }

  @protected
  void sse_encode_bolt_12_invoice_request_details(
    Bolt12InvoiceRequestDetails self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_bolt_12_offer(Bolt12Offer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.offer, serializer);
    sse_encode_payment_request_source(self.source, serializer);
  }

  @protected
  void sse_encode_bolt_12_offer_blinded_path(Bolt12OfferBlindedPath self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.blindedHops, serializer);
  }

  @protected
  void sse_encode_bolt_12_offer_details(Bolt12OfferDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_64(self.absoluteExpiry, serializer);
    sse_encode_list_String(self.chains, serializer);
    sse_encode_opt_String(self.description, serializer);
    sse_encode_opt_String(self.issuer, serializer);
    sse_encode_opt_box_autoadd_amount(self.minAmount, serializer);
    sse_encode_bolt_12_offer(self.offer, serializer);
    sse_encode_list_bolt_12_offer_blinded_path(self.paths, serializer);
    sse_encode_opt_String(self.signingPubkey, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_aes_success_action_data(AesSuccessActionData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_aes_success_action_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_aes_success_action_data_decrypted(
    AesSuccessActionDataDecrypted self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_aes_success_action_data_decrypted(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_aes_success_action_data_result(
    AesSuccessActionDataResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_aes_success_action_data_result(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_amount(Amount self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_amount(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_asset_filter(AssetFilter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_asset_filter(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bip_21_details(Bip21Details self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bip_21_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bitcoin_address_details(BitcoinAddressDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bitcoin_address_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bolt_11_invoice_details(Bolt11InvoiceDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bolt_11_invoice_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bolt_12_invoice_details(Bolt12InvoiceDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bolt_12_invoice_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bolt_12_invoice_request_details(
    Bolt12InvoiceRequestDetails self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bolt_12_invoice_request_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bolt_12_offer_details(Bolt12OfferDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bolt_12_offer_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_check_lightning_address_request(
    CheckLightningAddressRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_check_lightning_address_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_claim_deposit_request(ClaimDepositRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_claim_deposit_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_config(Config self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_connect_request(ConnectRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_connect_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_credentials(Credentials self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_credentials(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_deposit_claim_error(DepositClaimError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_deposit_claim_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_fee(Fee self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_fee(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_get_info_request(GetInfoRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_get_info_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_get_payment_request(GetPaymentRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_get_payment_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_get_tokens_metadata_request(
    GetTokensMetadataRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_get_tokens_metadata_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_lightning_address_details(
    LightningAddressDetails self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_lightning_address_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_lightning_address_info(LightningAddressInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_lightning_address_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_list_payments_request(ListPaymentsRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_payments_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_list_unclaimed_deposits_request(
    ListUnclaimedDepositsRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_unclaimed_deposits_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_lnurl_auth_request_details(
    LnurlAuthRequestDetails self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_lnurl_auth_request_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_lnurl_pay_info(LnurlPayInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_lnurl_pay_info(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_lnurl_pay_request(LnurlPayRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_lnurl_pay_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_lnurl_pay_request_details(
    LnurlPayRequestDetails self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_lnurl_pay_request_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_lnurl_withdraw_request_details(
    LnurlWithdrawRequestDetails self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_lnurl_withdraw_request_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_message_success_action_data(
    MessageSuccessActionData self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_message_success_action_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_payment(Payment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_payment_details(PaymentDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_prepare_lnurl_pay_request(
    PrepareLnurlPayRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_prepare_lnurl_pay_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_prepare_send_payment_request(
    PrepareSendPaymentRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_prepare_send_payment_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_receive_payment_request(ReceivePaymentRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_receive_payment_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_refund_deposit_request(RefundDepositRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_refund_deposit_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_register_lightning_address_request(
    RegisterLightningAddressRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_register_lightning_address_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sats_payment_details(SatsPaymentDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sats_payment_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_seed(Seed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_seed(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_send_onchain_fee_quote(SendOnchainFeeQuote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_send_onchain_fee_quote(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_send_payment_options(SendPaymentOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_send_payment_options(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_send_payment_request(SendPaymentRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_send_payment_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_silent_payment_address_details(
    SilentPaymentAddressDetails self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_silent_payment_address_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_spark_address_details(SparkAddressDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_spark_address_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_spark_address_payment_type(
    SparkAddressPaymentType self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_spark_address_payment_type(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_spark_invoice_fields(SparkInvoiceFields self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_spark_invoice_fields(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_success_action(SuccessAction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_success_action(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_success_action_processed(
    SuccessActionProcessed self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_success_action_processed(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_symbol(Symbol self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_symbol(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sync_wallet_request(SyncWalletRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sync_wallet_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_token_metadata(TokenMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_token_metadata(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tokens_payment_details(TokensPaymentDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tokens_payment_details(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_url_success_action_data(UrlSuccessActionData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_url_success_action_data(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_wait_for_payment_request(WaitForPaymentRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_wait_for_payment_request(self, serializer);
  }

  @protected
  void sse_encode_check_lightning_address_request(
    CheckLightningAddressRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.username, serializer);
  }

  @protected
  void sse_encode_claim_deposit_request(ClaimDepositRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_u_32(self.vout, serializer);
    sse_encode_opt_box_autoadd_fee(self.maxFee, serializer);
  }

  @protected
  void sse_encode_claim_deposit_response(ClaimDepositResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment(self.payment, serializer);
  }

  @protected
  void sse_encode_config(Config self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.apiKey, serializer);
    sse_encode_network(self.network, serializer);
    sse_encode_u_32(self.syncIntervalSecs, serializer);
    sse_encode_opt_box_autoadd_fee(self.maxDepositClaimFee, serializer);
    sse_encode_opt_String(self.lnurlDomain, serializer);
    sse_encode_bool(self.preferSparkOverLightning, serializer);
    sse_encode_opt_list_external_input_parser(self.externalInputParsers, serializer);
    sse_encode_bool(self.useDefaultExternalInputParsers, serializer);
  }

  @protected
  void sse_encode_connect_request(ConnectRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_config(self.config, serializer);
    sse_encode_seed(self.seed, serializer);
    sse_encode_String(self.storageDir, serializer);
  }

  @protected
  void sse_encode_credentials(Credentials self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.username, serializer);
    sse_encode_String(self.password, serializer);
  }

  @protected
  void sse_encode_currency_info(CurrencyInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_u_32(self.fractionSize, serializer);
    sse_encode_opt_box_autoadd_u_32(self.spacing, serializer);
    sse_encode_opt_box_autoadd_symbol(self.symbol, serializer);
    sse_encode_opt_box_autoadd_symbol(self.uniqSymbol, serializer);
    sse_encode_list_localized_name(self.localizedName, serializer);
    sse_encode_list_locale_overrides(self.localeOverrides, serializer);
  }

  @protected
  void sse_encode_deposit_claim_error(DepositClaimError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case DepositClaimError_DepositClaimFeeExceeded(
        tx: final tx,
        vout: final vout,
        maxFee: final maxFee,
        actualFee: final actualFee,
      ):
        sse_encode_i_32(0, serializer);
        sse_encode_String(tx, serializer);
        sse_encode_u_32(vout, serializer);
        sse_encode_box_autoadd_fee(maxFee, serializer);
        sse_encode_u_64(actualFee, serializer);
      case DepositClaimError_MissingUtxo(tx: final tx, vout: final vout):
        sse_encode_i_32(1, serializer);
        sse_encode_String(tx, serializer);
        sse_encode_u_32(vout, serializer);
      case DepositClaimError_Generic(message: final message):
        sse_encode_i_32(2, serializer);
        sse_encode_String(message, serializer);
    }
  }

  @protected
  void sse_encode_deposit_info(DepositInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_u_32(self.vout, serializer);
    sse_encode_u_64(self.amountSats, serializer);
    sse_encode_opt_String(self.refundTx, serializer);
    sse_encode_opt_String(self.refundTxId, serializer);
    sse_encode_opt_box_autoadd_deposit_claim_error(self.claimError, serializer);
  }

  @protected
  void sse_encode_external_input_parser(ExternalInputParser self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.providerId, serializer);
    sse_encode_String(self.inputRegex, serializer);
    sse_encode_String(self.parserUrl, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_fee(Fee self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Fee_Fixed(amount: final amount):
        sse_encode_i_32(0, serializer);
        sse_encode_u_64(amount, serializer);
      case Fee_Rate(satPerVbyte: final satPerVbyte):
        sse_encode_i_32(1, serializer);
        sse_encode_u_64(satPerVbyte, serializer);
    }
  }

  @protected
  void sse_encode_fiat_currency(FiatCurrency self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_currency_info(self.info, serializer);
  }

  @protected
  void sse_encode_get_info_request(GetInfoRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_bool(self.ensureSynced, serializer);
  }

  @protected
  void sse_encode_get_info_response(GetInfoResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.balanceSats, serializer);
    sse_encode_Map_String_token_balance_None(self.tokenBalances, serializer);
  }

  @protected
  void sse_encode_get_payment_request(GetPaymentRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.paymentId, serializer);
  }

  @protected
  void sse_encode_get_payment_response(GetPaymentResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment(self.payment, serializer);
  }

  @protected
  void sse_encode_get_tokens_metadata_request(GetTokensMetadataRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_String(self.tokenIdentifiers, serializer);
  }

  @protected
  void sse_encode_get_tokens_metadata_response(GetTokensMetadataResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_token_metadata(self.tokensMetadata, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_input_type(InputType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case InputType_BitcoinAddress(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_bitcoin_address_details(field0, serializer);
      case InputType_Bolt11Invoice(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_bolt_11_invoice_details(field0, serializer);
      case InputType_Bolt12Invoice(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_bolt_12_invoice_details(field0, serializer);
      case InputType_Bolt12Offer(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_bolt_12_offer_details(field0, serializer);
      case InputType_LightningAddress(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_box_autoadd_lightning_address_details(field0, serializer);
      case InputType_LnurlPay(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_box_autoadd_lnurl_pay_request_details(field0, serializer);
      case InputType_SilentPaymentAddress(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_box_autoadd_silent_payment_address_details(field0, serializer);
      case InputType_LnurlAuth(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_box_autoadd_lnurl_auth_request_details(field0, serializer);
      case InputType_Url(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_String(field0, serializer);
      case InputType_Bip21(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_box_autoadd_bip_21_details(field0, serializer);
      case InputType_Bolt12InvoiceRequest(field0: final field0):
        sse_encode_i_32(10, serializer);
        sse_encode_box_autoadd_bolt_12_invoice_request_details(field0, serializer);
      case InputType_LnurlWithdraw(field0: final field0):
        sse_encode_i_32(11, serializer);
        sse_encode_box_autoadd_lnurl_withdraw_request_details(field0, serializer);
      case InputType_SparkAddress(field0: final field0):
        sse_encode_i_32(12, serializer);
        sse_encode_box_autoadd_spark_address_details(field0, serializer);
    }
  }

  @protected
  void sse_encode_key_set_type(KeySetType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_lightning_address_details(LightningAddressDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_lnurl_pay_request_details(self.payRequest, serializer);
  }

  @protected
  void sse_encode_lightning_address_info(LightningAddressInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.description, serializer);
    sse_encode_String(self.lightningAddress, serializer);
    sse_encode_String(self.lnurl, serializer);
    sse_encode_String(self.username, serializer);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_bip_21_extra(List<Bip21Extra> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bip_21_extra(item, serializer);
    }
  }

  @protected
  void sse_encode_list_bolt_11_route_hint(List<Bolt11RouteHint> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bolt_11_route_hint(item, serializer);
    }
  }

  @protected
  void sse_encode_list_bolt_11_route_hint_hop(List<Bolt11RouteHintHop> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bolt_11_route_hint_hop(item, serializer);
    }
  }

  @protected
  void sse_encode_list_bolt_12_offer_blinded_path(
    List<Bolt12OfferBlindedPath> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_bolt_12_offer_blinded_path(item, serializer);
    }
  }

  @protected
  void sse_encode_list_deposit_info(List<DepositInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_deposit_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_external_input_parser(List<ExternalInputParser> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_external_input_parser(item, serializer);
    }
  }

  @protected
  void sse_encode_list_fiat_currencies_response(ListFiatCurrenciesResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_fiat_currency(self.currencies, serializer);
  }

  @protected
  void sse_encode_list_fiat_currency(List<FiatCurrency> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_fiat_currency(item, serializer);
    }
  }

  @protected
  void sse_encode_list_fiat_rates_response(ListFiatRatesResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_rate(self.rates, serializer);
  }

  @protected
  void sse_encode_list_input_type(List<InputType> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_input_type(item, serializer);
    }
  }

  @protected
  void sse_encode_list_locale_overrides(List<LocaleOverrides> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_locale_overrides(item, serializer);
    }
  }

  @protected
  void sse_encode_list_localized_name(List<LocalizedName> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_localized_name(item, serializer);
    }
  }

  @protected
  void sse_encode_list_payment(List<Payment> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_payment(item, serializer);
    }
  }

  @protected
  void sse_encode_list_payment_status(List<PaymentStatus> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_payment_status(item, serializer);
    }
  }

  @protected
  void sse_encode_list_payment_type(List<PaymentType> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_payment_type(item, serializer);
    }
  }

  @protected
  void sse_encode_list_payments_request(ListPaymentsRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_list_payment_type(self.typeFilter, serializer);
    sse_encode_opt_list_payment_status(self.statusFilter, serializer);
    sse_encode_opt_box_autoadd_asset_filter(self.assetFilter, serializer);
    sse_encode_opt_box_autoadd_u_64(self.fromTimestamp, serializer);
    sse_encode_opt_box_autoadd_u_64(self.toTimestamp, serializer);
    sse_encode_opt_box_autoadd_u_32(self.offset, serializer);
    sse_encode_opt_box_autoadd_u_32(self.limit, serializer);
    sse_encode_opt_box_autoadd_bool(self.sortAscending, serializer);
  }

  @protected
  void sse_encode_list_payments_response(ListPaymentsResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_payment(self.payments, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_rate(List<Rate> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_rate(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_string_token_balance(
    List<(String, TokenBalance)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_token_balance(item, serializer);
    }
  }

  @protected
  void sse_encode_list_token_metadata(List<TokenMetadata> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_token_metadata(item, serializer);
    }
  }

  @protected
  void sse_encode_list_unclaimed_deposits_request(
    ListUnclaimedDepositsRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_list_unclaimed_deposits_response(
    ListUnclaimedDepositsResponse self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_deposit_info(self.deposits, serializer);
  }

  @protected
  void sse_encode_lnurl_auth_request_details(LnurlAuthRequestDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.k1, serializer);
    sse_encode_opt_String(self.action, serializer);
    sse_encode_String(self.domain, serializer);
    sse_encode_String(self.url, serializer);
  }

  @protected
  void sse_encode_lnurl_pay_info(LnurlPayInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.lnAddress, serializer);
    sse_encode_opt_String(self.comment, serializer);
    sse_encode_opt_String(self.domain, serializer);
    sse_encode_opt_String(self.metadata, serializer);
    sse_encode_opt_box_autoadd_success_action_processed(self.processedSuccessAction, serializer);
    sse_encode_opt_box_autoadd_success_action(self.rawSuccessAction, serializer);
  }

  @protected
  void sse_encode_lnurl_pay_request(LnurlPayRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_prepare_lnurl_pay_response(self.prepareResponse, serializer);
  }

  @protected
  void sse_encode_lnurl_pay_request_details(LnurlPayRequestDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.callback, serializer);
    sse_encode_u_64(self.minSendable, serializer);
    sse_encode_u_64(self.maxSendable, serializer);
    sse_encode_String(self.metadataStr, serializer);
    sse_encode_u_16(self.commentAllowed, serializer);
    sse_encode_String(self.domain, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_opt_String(self.address, serializer);
    sse_encode_opt_box_autoadd_bool(self.allowsNostr, serializer);
    sse_encode_opt_String(self.nostrPubkey, serializer);
  }

  @protected
  void sse_encode_lnurl_pay_response(LnurlPayResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment(self.payment, serializer);
    sse_encode_opt_box_autoadd_success_action_processed(self.successAction, serializer);
  }

  @protected
  void sse_encode_lnurl_withdraw_request_details(LnurlWithdrawRequestDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.callback, serializer);
    sse_encode_String(self.k1, serializer);
    sse_encode_String(self.defaultDescription, serializer);
    sse_encode_u_64(self.minWithdrawable, serializer);
    sse_encode_u_64(self.maxWithdrawable, serializer);
  }

  @protected
  void sse_encode_locale_overrides(LocaleOverrides self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.locale, serializer);
    sse_encode_opt_box_autoadd_u_32(self.spacing, serializer);
    sse_encode_symbol(self.symbol, serializer);
  }

  @protected
  void sse_encode_localized_name(LocalizedName self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.locale, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.line, serializer);
    sse_encode_String(self.level, serializer);
  }

  @protected
  void sse_encode_message_success_action_data(MessageSuccessActionData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_network(Network self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_onchain_confirmation_speed(OnchainConfirmationSpeed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_U128(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_U128(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_amount(Amount? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_amount(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_asset_filter(AssetFilter? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_asset_filter(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_credentials(Credentials? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_credentials(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_deposit_claim_error(DepositClaimError? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_deposit_claim_error(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_fee(Fee? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_fee(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_lightning_address_info(
    LightningAddressInfo? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_lightning_address_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_lnurl_pay_info(LnurlPayInfo? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_lnurl_pay_info(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_payment_details(PaymentDetails? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_payment_details(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_send_payment_options(SendPaymentOptions? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_send_payment_options(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_spark_address_payment_type(
    SparkAddressPaymentType? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_spark_address_payment_type(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_spark_invoice_fields(SparkInvoiceFields? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_spark_invoice_fields(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_success_action(SuccessAction? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_success_action(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_success_action_processed(
    SuccessActionProcessed? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_success_action_processed(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_symbol(Symbol? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_symbol(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_external_input_parser(List<ExternalInputParser>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_external_input_parser(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_payment_status(List<PaymentStatus>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_payment_status(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_payment_type(List<PaymentType>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_payment_type(self, serializer);
    }
  }

  @protected
  void sse_encode_payment(Payment self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_payment_type(self.paymentType, serializer);
    sse_encode_payment_status(self.status, serializer);
    sse_encode_U128(self.amount, serializer);
    sse_encode_U128(self.fees, serializer);
    sse_encode_u_64(self.timestamp, serializer);
    sse_encode_payment_method(self.method, serializer);
    sse_encode_opt_box_autoadd_payment_details(self.details, serializer);
  }

  @protected
  void sse_encode_payment_details(PaymentDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PaymentDetails_Spark():
        sse_encode_i_32(0, serializer);
      case PaymentDetails_Token(metadata: final metadata, txHash: final txHash):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_token_metadata(metadata, serializer);
        sse_encode_String(txHash, serializer);
      case PaymentDetails_Lightning(
        description: final description,
        preimage: final preimage,
        invoice: final invoice,
        paymentHash: final paymentHash,
        destinationPubkey: final destinationPubkey,
        lnurlPayInfo: final lnurlPayInfo,
      ):
        sse_encode_i_32(2, serializer);
        sse_encode_opt_String(description, serializer);
        sse_encode_opt_String(preimage, serializer);
        sse_encode_String(invoice, serializer);
        sse_encode_String(paymentHash, serializer);
        sse_encode_String(destinationPubkey, serializer);
        sse_encode_opt_box_autoadd_lnurl_pay_info(lnurlPayInfo, serializer);
      case PaymentDetails_Withdraw(txId: final txId):
        sse_encode_i_32(3, serializer);
        sse_encode_String(txId, serializer);
      case PaymentDetails_Deposit(txId: final txId):
        sse_encode_i_32(4, serializer);
        sse_encode_String(txId, serializer);
    }
  }

  @protected
  void sse_encode_payment_method(PaymentMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_payment_request_source(PaymentRequestSource self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.bip21Uri, serializer);
    sse_encode_opt_String(self.bip353Address, serializer);
  }

  @protected
  void sse_encode_payment_status(PaymentStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_payment_type(PaymentType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_prepare_lnurl_pay_request(PrepareLnurlPayRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.amountSats, serializer);
    sse_encode_lnurl_pay_request_details(self.payRequest, serializer);
    sse_encode_opt_String(self.comment, serializer);
    sse_encode_opt_box_autoadd_bool(self.validateSuccessActionUrl, serializer);
  }

  @protected
  void sse_encode_prepare_lnurl_pay_response(PrepareLnurlPayResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.amountSats, serializer);
    sse_encode_opt_String(self.comment, serializer);
    sse_encode_lnurl_pay_request_details(self.payRequest, serializer);
    sse_encode_u_64(self.feeSats, serializer);
    sse_encode_bolt_11_invoice_details(self.invoiceDetails, serializer);
    sse_encode_opt_box_autoadd_success_action(self.successAction, serializer);
  }

  @protected
  void sse_encode_prepare_send_payment_request(PrepareSendPaymentRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.paymentRequest, serializer);
    sse_encode_opt_U128(self.amount, serializer);
    sse_encode_opt_String(self.tokenIdentifier, serializer);
  }

  @protected
  void sse_encode_prepare_send_payment_response(PrepareSendPaymentResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_send_payment_method(self.paymentMethod, serializer);
    sse_encode_U128(self.amount, serializer);
    sse_encode_opt_String(self.tokenIdentifier, serializer);
  }

  @protected
  void sse_encode_rate(Rate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.coin, serializer);
    sse_encode_f_64(self.value, serializer);
  }

  @protected
  void sse_encode_receive_payment_method(ReceivePaymentMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case ReceivePaymentMethod_SparkAddress():
        sse_encode_i_32(0, serializer);
      case ReceivePaymentMethod_BitcoinAddress():
        sse_encode_i_32(1, serializer);
      case ReceivePaymentMethod_Bolt11Invoice(description: final description, amountSats: final amountSats):
        sse_encode_i_32(2, serializer);
        sse_encode_String(description, serializer);
        sse_encode_opt_box_autoadd_u_64(amountSats, serializer);
    }
  }

  @protected
  void sse_encode_receive_payment_request(ReceivePaymentRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_receive_payment_method(self.paymentMethod, serializer);
  }

  @protected
  void sse_encode_receive_payment_response(ReceivePaymentResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.paymentRequest, serializer);
    sse_encode_u_64(self.feeSats, serializer);
  }

  @protected
  void sse_encode_record_string_token_balance((String, TokenBalance) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_token_balance(self.$2, serializer);
  }

  @protected
  void sse_encode_refund_deposit_request(RefundDepositRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_u_32(self.vout, serializer);
    sse_encode_String(self.destinationAddress, serializer);
    sse_encode_fee(self.fee, serializer);
  }

  @protected
  void sse_encode_refund_deposit_response(RefundDepositResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txId, serializer);
    sse_encode_String(self.txHex, serializer);
  }

  @protected
  void sse_encode_register_lightning_address_request(
    RegisterLightningAddressRequest self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.username, serializer);
    sse_encode_opt_String(self.description, serializer);
  }

  @protected
  void sse_encode_sats_payment_details(SatsPaymentDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_u_64(self.amount, serializer);
  }

  @protected
  void sse_encode_sdk_error(SdkError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SdkError_SparkError(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case SdkError_InvalidUuid(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case SdkError_InvalidInput(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case SdkError_NetworkError(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_String(field0, serializer);
      case SdkError_StorageError(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
      case SdkError_ChainServiceError(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
      case SdkError_DepositClaimFeeExceeded(
        tx: final tx,
        vout: final vout,
        maxFee: final maxFee,
        actualFee: final actualFee,
      ):
        sse_encode_i_32(6, serializer);
        sse_encode_String(tx, serializer);
        sse_encode_u_32(vout, serializer);
        sse_encode_box_autoadd_fee(maxFee, serializer);
        sse_encode_u_64(actualFee, serializer);
      case SdkError_MissingUtxo(tx: final tx, vout: final vout):
        sse_encode_i_32(7, serializer);
        sse_encode_String(tx, serializer);
        sse_encode_u_32(vout, serializer);
      case SdkError_LnurlError(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_String(field0, serializer);
      case SdkError_Generic(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_sdk_event(SdkEvent self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SdkEvent_Synced():
        sse_encode_i_32(0, serializer);
      case SdkEvent_ClaimDepositsFailed(unclaimedDeposits: final unclaimedDeposits):
        sse_encode_i_32(1, serializer);
        sse_encode_list_deposit_info(unclaimedDeposits, serializer);
      case SdkEvent_ClaimDepositsSucceeded(claimedDeposits: final claimedDeposits):
        sse_encode_i_32(2, serializer);
        sse_encode_list_deposit_info(claimedDeposits, serializer);
      case SdkEvent_PaymentSucceeded(payment: final payment):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_payment(payment, serializer);
      case SdkEvent_PaymentFailed(payment: final payment):
        sse_encode_i_32(4, serializer);
        sse_encode_box_autoadd_payment(payment, serializer);
    }
  }

  @protected
  void sse_encode_seed(Seed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Seed_Mnemonic(mnemonic: final mnemonic, passphrase: final passphrase):
        sse_encode_i_32(0, serializer);
        sse_encode_String(mnemonic, serializer);
        sse_encode_opt_String(passphrase, serializer);
      case Seed_Entropy(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_list_prim_u_8_strict(field0, serializer);
    }
  }

  @protected
  void sse_encode_send_onchain_fee_quote(SendOnchainFeeQuote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_64(self.expiresAt, serializer);
    sse_encode_send_onchain_speed_fee_quote(self.speedFast, serializer);
    sse_encode_send_onchain_speed_fee_quote(self.speedMedium, serializer);
    sse_encode_send_onchain_speed_fee_quote(self.speedSlow, serializer);
  }

  @protected
  void sse_encode_send_onchain_speed_fee_quote(SendOnchainSpeedFeeQuote self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.userFeeSat, serializer);
    sse_encode_u_64(self.l1BroadcastFeeSat, serializer);
  }

  @protected
  void sse_encode_send_payment_method(SendPaymentMethod self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SendPaymentMethod_BitcoinAddress(address: final address, feeQuote: final feeQuote):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_bitcoin_address_details(address, serializer);
        sse_encode_box_autoadd_send_onchain_fee_quote(feeQuote, serializer);
      case SendPaymentMethod_Bolt11Invoice(
        invoiceDetails: final invoiceDetails,
        sparkTransferFeeSats: final sparkTransferFeeSats,
        lightningFeeSats: final lightningFeeSats,
      ):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_bolt_11_invoice_details(invoiceDetails, serializer);
        sse_encode_opt_box_autoadd_u_64(sparkTransferFeeSats, serializer);
        sse_encode_u_64(lightningFeeSats, serializer);
      case SendPaymentMethod_SparkAddress(
        address: final address,
        fee: final fee,
        tokenIdentifier: final tokenIdentifier,
      ):
        sse_encode_i_32(2, serializer);
        sse_encode_String(address, serializer);
        sse_encode_U128(fee, serializer);
        sse_encode_opt_String(tokenIdentifier, serializer);
    }
  }

  @protected
  void sse_encode_send_payment_options(SendPaymentOptions self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SendPaymentOptions_BitcoinAddress(confirmationSpeed: final confirmationSpeed):
        sse_encode_i_32(0, serializer);
        sse_encode_onchain_confirmation_speed(confirmationSpeed, serializer);
      case SendPaymentOptions_Bolt11Invoice(
        preferSpark: final preferSpark,
        completionTimeoutSecs: final completionTimeoutSecs,
      ):
        sse_encode_i_32(1, serializer);
        sse_encode_bool(preferSpark, serializer);
        sse_encode_opt_box_autoadd_u_32(completionTimeoutSecs, serializer);
    }
  }

  @protected
  void sse_encode_send_payment_request(SendPaymentRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_prepare_send_payment_response(self.prepareResponse, serializer);
    sse_encode_opt_box_autoadd_send_payment_options(self.options, serializer);
  }

  @protected
  void sse_encode_send_payment_response(SendPaymentResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment(self.payment, serializer);
  }

  @protected
  void sse_encode_silent_payment_address_details(SilentPaymentAddressDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_bitcoin_network(self.network, serializer);
    sse_encode_payment_request_source(self.source, serializer);
  }

  @protected
  void sse_encode_spark_address(SparkAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.identityPublicKey, serializer);
    sse_encode_bitcoin_network(self.network, serializer);
    sse_encode_opt_box_autoadd_spark_invoice_fields(self.sparkInvoiceFields, serializer);
    sse_encode_opt_String(self.signature, serializer);
  }

  @protected
  void sse_encode_spark_address_details(SparkAddressDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.address, serializer);
    sse_encode_spark_address(self.decodedAddress, serializer);
    sse_encode_payment_request_source(self.source, serializer);
  }

  @protected
  void sse_encode_spark_address_payment_type(SparkAddressPaymentType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SparkAddressPaymentType_TokensPayment(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_tokens_payment_details(field0, serializer);
      case SparkAddressPaymentType_SatsPayment(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_sats_payment_details(field0, serializer);
    }
  }

  @protected
  void sse_encode_spark_invoice_fields(SparkInvoiceFields self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_u_32(self.version, serializer);
    sse_encode_opt_String(self.memo, serializer);
    sse_encode_opt_String(self.senderPublicKey, serializer);
    sse_encode_opt_box_autoadd_u_64(self.expiryTime, serializer);
    sse_encode_opt_box_autoadd_spark_address_payment_type(self.paymentType, serializer);
  }

  @protected
  void sse_encode_success_action(SuccessAction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SuccessAction_Aes(data: final data):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_aes_success_action_data(data, serializer);
      case SuccessAction_Message(data: final data):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_message_success_action_data(data, serializer);
      case SuccessAction_Url(data: final data):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_url_success_action_data(data, serializer);
    }
  }

  @protected
  void sse_encode_success_action_processed(SuccessActionProcessed self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case SuccessActionProcessed_Aes(result: final result):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_aes_success_action_data_result(result, serializer);
      case SuccessActionProcessed_Message(data: final data):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_message_success_action_data(data, serializer);
      case SuccessActionProcessed_Url(data: final data):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_url_success_action_data(data, serializer);
    }
  }

  @protected
  void sse_encode_symbol(Symbol self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.grapheme, serializer);
    sse_encode_opt_String(self.template, serializer);
    sse_encode_opt_box_autoadd_bool(self.rtl, serializer);
    sse_encode_opt_box_autoadd_u_32(self.position, serializer);
  }

  @protected
  void sse_encode_sync_wallet_request(SyncWalletRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_sync_wallet_response(SyncWalletResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_token_balance(TokenBalance self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_U128(self.balance, serializer);
    sse_encode_token_metadata(self.tokenMetadata, serializer);
  }

  @protected
  void sse_encode_token_metadata(TokenMetadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.identifier, serializer);
    sse_encode_String(self.issuerPublicKey, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.ticker, serializer);
    sse_encode_u_32(self.decimals, serializer);
    sse_encode_U128(self.maxSupply, serializer);
    sse_encode_bool(self.isFreezable, serializer);
  }

  @protected
  void sse_encode_tokens_payment_details(TokensPaymentDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.tokenIdentifier, serializer);
    sse_encode_opt_U128(self.amount, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_url_success_action_data(UrlSuccessActionData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.description, serializer);
    sse_encode_String(self.url, serializer);
    sse_encode_bool(self.matchesCallbackDomain, serializer);
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_wait_for_payment_identifier(WaitForPaymentIdentifier self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case WaitForPaymentIdentifier_PaymentId(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case WaitForPaymentIdentifier_PaymentRequest(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
    }
  }

  @protected
  void sse_encode_wait_for_payment_request(WaitForPaymentRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_wait_for_payment_identifier(self.identifier, serializer);
  }

  @protected
  void sse_encode_wait_for_payment_response(WaitForPaymentResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_payment(self.payment, serializer);
  }
}

@sealed
class ArcStorageImpl extends RustOpaque implements ArcStorage {
  // Not to be used by end users
  ArcStorageImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcStorageImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: BreezSdkSparkLib.instance.api.rust_arc_increment_strong_count_ArcStorage,
    rustArcDecrementStrongCount: BreezSdkSparkLib.instance.api.rust_arc_decrement_strong_count_ArcStorage,
    rustArcDecrementStrongCountPtr:
        BreezSdkSparkLib.instance.api.rust_arc_decrement_strong_count_ArcStoragePtr,
  );
}

@sealed
class BreezSdkImpl extends RustOpaque implements BreezSdk {
  // Not to be used by end users
  BreezSdkImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BreezSdkImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: BreezSdkSparkLib.instance.api.rust_arc_increment_strong_count_BreezSdk,
    rustArcDecrementStrongCount: BreezSdkSparkLib.instance.api.rust_arc_decrement_strong_count_BreezSdk,
    rustArcDecrementStrongCountPtr: BreezSdkSparkLib.instance.api.rust_arc_decrement_strong_count_BreezSdkPtr,
  );

  Stream<SdkEvent> addEventListener() =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkAddEventListener(that: this);

  Future<bool> checkLightningAddressAvailable({required CheckLightningAddressRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkCheckLightningAddressAvailable(
        that: this,
        request: request,
      );

  Future<ClaimDepositResponse> claimDeposit({required ClaimDepositRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkClaimDeposit(that: this, request: request);

  Future<void> deleteLightningAddress() =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkDeleteLightningAddress(that: this);

  Future<void> disconnect() => BreezSdkSparkLib.instance.api.crateSdkBreezSdkDisconnect(that: this);

  Future<GetInfoResponse> getInfo({required GetInfoRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkGetInfo(that: this, request: request);

  Future<LightningAddressInfo?> getLightningAddress() =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkGetLightningAddress(that: this);

  Future<GetPaymentResponse> getPayment({required GetPaymentRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkGetPayment(that: this, request: request);

  Future<GetTokensMetadataResponse> getTokensMetadata({required GetTokensMetadataRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkGetTokensMetadata(that: this, request: request);

  Future<ListFiatCurrenciesResponse> listFiatCurrencies() =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkListFiatCurrencies(that: this);

  Future<ListFiatRatesResponse> listFiatRates() =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkListFiatRates(that: this);

  Future<ListPaymentsResponse> listPayments({required ListPaymentsRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkListPayments(that: this, request: request);

  Future<ListUnclaimedDepositsResponse> listUnclaimedDeposits({
    required ListUnclaimedDepositsRequest request,
  }) => BreezSdkSparkLib.instance.api.crateSdkBreezSdkListUnclaimedDeposits(that: this, request: request);

  Future<LnurlPayResponse> lnurlPay({required LnurlPayRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkLnurlPay(that: this, request: request);

  Future<InputType> parse({required String input}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkParse(that: this, input: input);

  Future<PrepareLnurlPayResponse> prepareLnurlPay({required PrepareLnurlPayRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkPrepareLnurlPay(that: this, request: request);

  Future<PrepareSendPaymentResponse> prepareSendPayment({required PrepareSendPaymentRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkPrepareSendPayment(that: this, request: request);

  Future<ReceivePaymentResponse> receivePayment({required ReceivePaymentRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkReceivePayment(that: this, request: request);

  Future<RefundDepositResponse> refundDeposit({required RefundDepositRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkRefundDeposit(that: this, request: request);

  Future<LightningAddressInfo> registerLightningAddress({required RegisterLightningAddressRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkRegisterLightningAddress(that: this, request: request);

  Future<bool> removeEventListener({required String id}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkRemoveEventListener(that: this, id: id);

  Future<SendPaymentResponse> sendPayment({required SendPaymentRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkSendPayment(that: this, request: request);

  Future<SyncWalletResponse> syncWallet({required SyncWalletRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkSyncWallet(that: this, request: request);

  Future<WaitForPaymentResponse> waitForPayment({required WaitForPaymentRequest request}) =>
      BreezSdkSparkLib.instance.api.crateSdkBreezSdkWaitForPayment(that: this, request: request);
}

@sealed
class SdkBuilderImpl extends RustOpaque implements SdkBuilder {
  // Not to be used by end users
  SdkBuilderImpl.frbInternalDcoDecode(List<dynamic> wire) : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SdkBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: BreezSdkSparkLib.instance.api.rust_arc_increment_strong_count_SdkBuilder,
    rustArcDecrementStrongCount: BreezSdkSparkLib.instance.api.rust_arc_decrement_strong_count_SdkBuilder,
    rustArcDecrementStrongCountPtr:
        BreezSdkSparkLib.instance.api.rust_arc_decrement_strong_count_SdkBuilderPtr,
  );

  Future<BreezSdk> build() => BreezSdkSparkLib.instance.api.crateSdkBuilderSdkBuilderBuild(that: this);

  SdkBuilder withKeySet({
    required KeySetType keySetType,
    required bool useAddressIndex,
    int? accountNumber,
  }) => BreezSdkSparkLib.instance.api.crateSdkBuilderSdkBuilderWithKeySet(
    that: this,
    keySetType: keySetType,
    useAddressIndex: useAddressIndex,
    accountNumber: accountNumber,
  );

  SdkBuilder withRestChainService({required String url, Credentials? credentials}) => BreezSdkSparkLib
      .instance
      .api
      .crateSdkBuilderSdkBuilderWithRestChainService(that: this, url: url, credentials: credentials);
}
